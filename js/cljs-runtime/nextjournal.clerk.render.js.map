{"version":3,"sources":["nextjournal/clerk/render.cljs"],"mappings":";;;;;;;;;AA0BA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,kFAAA,lFAASI,6FAEAG,KAAKC;;AAFd,AAAA,eAAA,XAESD;AAFT,AAEiB,QAAMD,UAAGE;;;AAF1B,CAAA,AAAA,kFAAA,lFAASJ,6FAGAG,KAAKC,EAAEC;;AAHhB,AAAA,eAAA,XAGSF;AAHT,AAGoB,IAAAG,mBAAI,CAAMJ,UAAGE;AAAb,AAAA,oBAAAE;AAAAA;;AAAgBD;;;;AAHpC,CAAA,AAAA,kFAAA,lFAASL,6FAKMO;;AALf,AAAA,gBAAA,ZAKeA;AALf,AAKqB,kBAAA,VAAML;;;AAL3B,CAAA,AAAA,wFAAA,xFAASF,mGAOOO,MAAKC;;AAPrB,AAAA,gBAAA,ZAOgBD;AAPhB,AAUI,IAAAE,WAAa,AAACE,qBAAWH;IAAzBE,eAAC,WAAA,VAAMR;AAAP,AAAA,QAAAQ,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;AAVJ,CAAA,AAAA,sFAAA,tFAAST,iGAYEO,MAAKK;;AAZhB,AAAA,gBAAA,ZAYWL;AAZX,AAYmB,IAAAM,eAAC,WAAA,VAAMX;AAAP,AAAA,QAAAW,6CAAAA,gDAAAA,LAAaD,4BAAAA;;;AAZhC,CAAA,AAAA,sFAAA,tFAASZ,iGAaEO,MAAKK,EAAEE;;AAblB,AAAA,gBAAA,ZAaWP;AAbX,AAaqB,IAAAQ,WAAA,WAAAC;AAAA,AAAc,0EAAAA,kCAAAA,pGAACJ,kCAAAA,sDAAAA,LAAIE,kCAAAA;;IAAnBG,eAAC,WAAA,VAAMf;AAAP,AAAA,QAAAe,6CAAAA,2CAAAF,YAAAE,uBAAAF;;;AAbrB,CAAA,AAAA,sFAAA,tFAASf,iGAcEO,MAAKK,EAAEE,EAAEI;;AAdpB,AAAA,gBAAA,ZAcWX;AAdX,AAcuB,IAAAY,WAAA,WAAAC;AAAA,AAAc,0EAAAA,oCAAAA,tGAACR,kCAAAA,wDAAAA,PAAIE,oCAAAA,lCAAEI,oCAAAA;;IAArBG,eAAC,WAAA,VAAMnB;AAAP,AAAA,QAAAmB,6CAAAA,2CAAAF,YAAAE,uBAAAF;;;AAdvB,CAAA,AAAA,sFAAA,tFAASnB,iGAeEO,MAAKK,EAAEE,EAAEI,EAAEI;;AAftB,AAAA,gBAAA,ZAeWf;AAfX,AAe0B,IAAAgB,WAAA,WAAAC;AAAA,AAAc,uDAAAA,hDAACE,8CAAMd,mBAAIE,EAAEI,EAAEI;;IAA7BG,eAAC,WAAA,VAAMvB;AAAP,AAAA,QAAAuB,6CAAAA,2CAAAF,YAAAE,uBAAAF;;;AAf1B,CAAA,iDAAA,jDAASvB;AAAT,AAAA,AAAA;;;AAAA,CAAA,uDAAA,vDAASA;;AAAT,CAAA,0DAAA,1DAASA;;AAAT,CAAA,+DAAA,WAAAJ,mBAAAC,qBAAAC,lHAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;6CAAA,7CAASI,kGAAcC;AAAvB,AAAA,YAAAF,sCAAuBE;;;AAAdF,AAiBT,oCAAA,pCAAO2B,gFAAUC;AAAjB,AAAoB,IAAAC,WAAQD;AAAR,AAAA,GAAU,GAAK,AAACE,uBAAOF;AAAvB,0BAAAC,nBAA2BE;;AAA3BF;;;AAEpB,AAAA;;;oCAAA,4CAAAG,hFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kEAAA,lEAAMD,6EAEFtB;AAFJ,AAEO,iDAAA,1CAACwB,wCAAcxB;;;AAFtB,CAAA,kEAAA,lEAAMsB,6EAGFtB,EAAEyB;AAHN,AAGY,OAACD,wCAAcxB,EAAE,AAACe,kCAASU;;;AAHvC,CAAA,4DAAA,5DAAMH;;AAAN,AAKA,AAAA;;;wCAAA,gDAAAF,xFAAMO;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAJ,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAMI,iFAEFX;AAFJ,AAEO,6EAAA,tEAACY,oEAAaZ;;;AAFrB,CAAA,sEAAA,tEAAMW,iFAGFX,EAAES;AAHN,AAGY,OAACI,4CAAkBb,EAAE,AAACG,mBAASM;;;AAH3C,CAAA,gEAAA,hEAAME;;AAAN,AAKA,uCAAA,vCAAOG,sFAEJ9B;AAFH,AAAA;AAAA,AAEO,IAAM+B,IAAE,CAAC/B,kCAAAA,oCAAAA;AAAT,AAAa,GAAI,AAACgC,oBAAID;AAAGA;;AAAEE;;;;AAElC,AAAA;;;;sCAAA,8CAAAb,pFAAMe;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAZ,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oEAAA,pEAAMY,+EAGFnC;AAHJ,AAGO,yFAAA,lFAACoC,0CAAgB,AAACN,qCAAY9B;;;AAHrC,CAAA,oEAAA,pEAAMmC,+EAIFnC,EAAEyB;AAJN,AAIY,OAACW,0CAAgB,AAACN,qCAAY9B,GAAG,AAACe,kCAASU;;;AAJvD,CAAA,8DAAA,9DAAMU;;AAAN,AAMA;;;qCAAA,rCAAME,kFAEHC;AAFH,AAGE,YAAAlD,sCAAe,AAACmD,yCAAeD;;AAEjC,8CAAA,9CAAOE,oGAAeC;AAAtB,AACE,IAAAC,SAAUD;AAAV,AAAA,AAAA,CAAA,AAAAC,2BAAAC;;AAAA,CAAA,AAAAD,yCAEE,WAAa/C;AAAb,AAAA,gBAAA,ZAAaA;AAAb,AAAmB,OAAWA;;;AAFhC,CAAA,AAAA+C,2BAAAC;;AAAA,CAAA,AAAAD,+CAIE,WAAc/C,MAAKC;AAAnB,AAAA,gBAAA,ZAAcD;AAAd,AAA8B,QAAM,AAAWA,oBAAMC;;;AAJvD,CAAA,AAAA8C,0BAAAC;;AAAA,CAAA,AAAAD,6CAME,WACIE,EAAE5C;AADN,AAAA,YAAA,RACI4C;AADJ,AACS,OAACC,sBAAOD,MAAE,CAAC5C,kCAAAA,yCAAAA,TAAE4C,qBAAAA;;;AAPxB,CAAA,AAAAF,6CAME,WAEIE,EAAE5C,EAAEE;AAFR,AAAA,YAAA,RAEI0C;AAFJ,AAEW,OAACC,sBAAOD,MAAE,CAAC5C,kCAAAA,2CAAAA,XAAE4C,uBAAAA,jBAAE1C,uBAAAA;;;AAR5B,CAAA,AAAAwC,6CAME,WAGIE,EAAE5C,EAAEE,EAAEI;AAHV,AAAA,YAAA,RAGIsC;AAHJ,AAGa,OAACC,sBAAOD,MAAE,CAAC5C,kCAAAA,6CAAAA,bAAE4C,yBAAAA,nBAAE1C,yBAAAA,vBAAEI,yBAAAA;;;AAThC,CAAA,AAAAoC,6CAME,WAIIE,EAAE5C,EAAEE,EAAEI,EAAEI;AAJZ,AAAA,YAAA,RAIIkC;AAJJ,AAIgB,OAACC,sBAAOD,MAAE,AAAC9B,8CAAMd,EAAE4C,MAAE1C,EAAEI,EAAEI;;;AAV3CgC;;AAYF,AAAA;;;mCAAA,2CAAAtB,9EAAM2B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iEAAA,jEAAMwB;AAAN,AAEM,sEAAA,/DAACC;;;AAFP,CAAA,iEAAA,jEAAMD,4EAGFT;AAHJ,AAGU,OAACE,4CAAc,AAACS,uCAAaX;;;AAHvC,CAAA,2DAAA,3DAAMS;;AAAN,AAKA,mDAAA,nDAAMG,8GAAyBC,UAAUC;AAAzC,AACE,OAACC,4EAAqBF,UAAUC;;AAElC;;;qCAAA,rCAAME,kFAEHtC;AAFH,AAGE,IAAMuC,KAAG,oEAAA,pEAAC3B;AAAV,AACE,OAACsB,iDACA,AAACtB,oEACA,WAAK4B;AAAL,AACE,AAACC,oBAAUzC,EAAEuC,GAAG,WAAKG,EAAEA,MAAEA,MAAEA;AAAX,AAAc,QAACF,8CAAAA,gDAAAA;;;AADjC;AAAA,AAEG,OAACG,uBAAa3C,EAAEuC;;QAJrB,LACC,CAIKvC;AALN,AAME,IAAA4C,4CAAUG;IAAVF,4CAAA;AAAA,AAAA,2CAAAA,1CAAUE;;AAAV,IAAA,AAAA,OAAAD,gBAA8C9C;UAA9C,AAAA,2CAAA4C,1CAAUG;;;AAEhB,AAACC,wCAAwB,6BAAA,2CAAA,mFAAA,3JAACC;AAE1B,AAAA;AAAA;AAAA;AAAA;AAAA,AAEA,AAAKC,gCAAK,6BAAA,7BAACC;AAEX,qCAAA,rCAAMC,kFAAWC;AAAjB,AACE,OAACC,+CACA,eAAAC,JAAKI;AAAL,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAAcI;cAAd,AAAAF,4CAAAF,eAAA,rEAA0BK;eAA1B,AAAAH,4CAAAF,eAAA,tEAAkCM;AAAlC,AACE,oBAAID;AACF,IAAME,QAAM,AAACC,yCAAoBJ;AAAjC,AACE,uKAAaG,2DACD,CAAA,gDAAS,AAACE,mCAAcF,yEACvB,CAACX,mEAAAA,6EAAAA,ZAAUU,yDAAAA,xiBACnB,iDAAA,2CAAA,4DAAA,2JAAA,nTAACI,6CAAKP,3DACNQ;;AACP,IAAAC,WAAW,AAAA,2FAAWR;AAAtB,AAAA,4IAAAQ,yDAAAA,7LAAChB,mEAAAA,6EAAAA;;GATN,iCAWCC;;AAEH,4CAAA,5CAAMgB,gGAAkBC;AAAxB,AACE,IAAAC,aAAA,AAAAzB,gBAA4BwB;IAA5BC,iBAAA,AAAAd,4BAAAc;uBAAA,AAAAb,4CAAAa,eAAA,9EAAcC;aAAd,2CAAA,qDAAA,wDAAA,+DAAA,MAAA,2DAAA,jSACMC;AADN,AAAA,0FAAA,wGAAA,mFAAA,4MAAA,2CAAA,6DAAA;AAAA,AAIgB,sFAAA,/EAACC,mDAAMJ,YAAOK,iFAAkB,AAACC,cAAIJ;WACjD,oCAAA,mFAAA,oFAAA,2CAAA,wDAAA,6BAAA,wDAAA,wBAAA,2DAAA,YAAA,oDAAA,eAAA,mFAAA,qFAAA,2CAAA,+CAAA,wbAAA,oDAAA,eAAA,2DAAA,UAAA,2DAAA,UAAA,6DAAA,2CAAA,2DAAA,2CAAA,uDAAA,IAAA,wDAAA,aAAA,2DAAA,2CAAA,uDAAA,IAAA,wDAAA,IAAA,+GAAA,mFAAA,oFAAA,2CAAA,oDAAA,MAAA,wDAAA,wBAAA,2DAAA,YAAA,oDAAA,OAAA,wDAAA,qCAAA,mFAAA,uFAAA,2CAAA,iDAAA,UAAA,gDAAA,UAAA,+CAAA,UAAA,oDAAA,eAAA,2DAAA,UAAA,2DAAA,UAAA,6DAAA,2CAAA,2DAAA,2CAAA,uDAAA,YAAA,2DAAA,2CAAA,uDAAA,IAAA,uGAAA,mFAAA,kFAAA,2CAAA,2DAAA,UAAA,2DAAA,UAAA,6DAAA,2CAAA,2DAAA,2CAAA,wDAAA,aAAA,2DAAA,2CAAA,wDAAA,IAAA,+FAAA,mFAAA,yDAAA,2CAAA,iDAAA,UAAA,gDAAA,UAAA,+CAAA,UAAA,+DAAA,8BAAA,oDAAA,+BAAA,mFAAA,yDAAA,2CAAA,iDAAA,SAAA,gDAAA,UAAA,+CAAA,UAAA,+DAAA,8BAAA,oDAAA,+BAAA,mFAAA,yDAAA,2CAAA,iDAAA,KAAA,gDAAA,UAAA,+CAAA,UAAA,oDAAA,+BAAA,mFAAA,yDAAA,2CAAA,iDAAA,UAAA,gDAAA,UAAA,+CAAA,UAAA,+DAAA,8BAAA,oDAAA,+BAAA,mFAAA,yDAAA,2CAAA,iDAAA,UAAA,gDAAA,SAAA,+CAAA,UAAA,+DAAA,8BAAA,oDAAA,+BAAA,mFAAA,yDAAA,2CAAA,iDAAA,KAAA,gDAAA,UAAA,+CAAA,UAAA,oDAAA,/9OAAIA,oJACEK,igBAKCC,g3CAMkDL,iLACnDI,2jBAMCE,g8BAQwCN,yKACxCO,6sBAIyCP;;AAStD,kDAAA,lDAAMQ,4GAAmBC,IAAIC;AAA7B,AACE,GAAM,QAAAC;AAAN,AACE,OAAU,AAAgBA,4BAAWF,IAAIC;;AAD3C;;;AAGF,4CAAA,5CAAME,gGAAkBH;AAAxB,AACE,GAAM,QAAAE;AAAN,AACE,OAACE,sDAAwB,AAAU,AAAgBF,4BAAWF;;AADhE;;;AAIF,uDAAA,vDAAKK;AAEL,+CAAA,/CAAMC,sGAAgBhB;AAAtB,AACE,IAAMiB,mBAAW,AAAa,uBAAA,vBAACC;AAA/B,AACE,oBAAIlB;AACF,qBAAA,rBAAMiB;;AACN,wBAAA,xBAASA;;;AACb,OAACR,gDAAkBM,qDAA4Bf;;AAEjD,iDAAA,jDAAMmB,0GAAkBrB;AAAxB,AACE,IAAAsB,aAAA,AAAA9C,gBAA4BwB;IAA5BsB,iBAAA,AAAAnC,4BAAAmC;uBAAA,AAAAlC,4CAAAkC,eAAA,9EAAcpB;AAAd,AACE,gCAAA,hCAAC/B,oBAAU6B,0HACA,uBAAAuB,ZAAKnD,EAAEA,MAAEqD;AAAT,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAArC,4BAAAqC;2BAAA,AAAApC,4CAAAoC,eAAA,lFAAqBtB;AAArB,AACE,GAAM,AAACwB,gDAAK,AAAA,+FAAaD,KAAKvB;AAA9B,AACE,OAACgB,6CAAehB;;AADlB;;;;AAEb,oBAAMA;AAAN,AACE,OAACgB,6CAAehB;;AADlB;;;AAGJ,GAAA,QAAAyB,wCAAAC,8CAAAC,qDAAAC;AAAA;AAAA,AAAA,AAASC,8CAAc,gDAAA,hDAACC;;AAExB,2CAAA,mDAAAC,9FAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA/C,4BAAA+C;WAAAA,PAA4BE;SAA5B,AAAAhD,4CAAA8C,eAAA,hEAAiC9G;oBAAjC,AAAAgE,4CAAA8C,eAAA,3EAAmDG;UAAnD,AAAAjD,4CAAA8C,eAAA,jEAA2DI;qBAA3D,AAAAlD,4CAAA8C,eAAA,5EAA+DK;AAA/D,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAjE;AAAA,AAAA,GAAA,CAAAiE,4BAAA;AAAA;AAAA,IAAAC,yBAAAD;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAG;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAP,2BAAA,AAAAG;;;AAAA,IAAAK,YAAA,CAAA,AAAAR,yBAAA;wBAAA,EAAA,EAAAQ,eAAA,AAAA1C,cAAA,AAAAkC,6BAAA,SAAA,CAAAA,cAAA,OAAA,gBAAA,CAAAA,cAAA,hJAAaY;kBAAb,EAAA,EAAAJ,eAAA,AAAA1C,cAAA,AAAAkC,6BAAA,SAAA,CAAAA,cAAA,pGACaxC,2GAAO,gDAAA,wCAAA,mDAAA,wDAAA,iEAAA,gFAAA,uDAAA,wDAAA,oEAAA,uDAAA,2TAAA,MAAA,2CAAA,iEAAA,iFAAA,5jCAACgC,+nBAAa,AAAClD,mCAAU,AAAA,2FAAWwD,MACnBA,IACI,AAACvB,0CAAiBE,sDAIXmC,2NAEZ,iBAAAC,qBAAuB,AAACtC,0CAAiBqC;AAAzC,AAAA,GAAA,CAAAC,sBAAA;AAEE,uDAAA,hDAAC3B,+GAAgBa;;AAFnB,yBAAAc,rBAAUC;AAAV,AACEA;;sCAVtC,CAAAd,cAAA,hDAQwC,AAAClC,cAAI+B;kBAR7C,EAAA,EAAAW,eAAA,AAAA1C,cAAA,AAAAkC,6BAAA,SAAA,CAAAA,cAAA,OAAA,WAAAS,tHAYaM;AAZb,AAY0B,oBAAAN;AAAA,AAAQ,OAAC5B,+CAAiBrB;;AAA1B;;IAZ1B,CAAAwC,cAAA;aAAA,EAAA,EAAAQ,eAAA,AAAA1C,cAAA,AAAAkC,6BAAA,SAAA,CAAAA,cAAA,OAAA,WAAAU,jHAaaM;AAbb,AAaqB,oBAAAN;AAAA,AAAQ,sFAAA,+DAAAA,9IAAC9C,mDAAMJ,YAAOK;;AAAtB;;IAbrB,CAAAmC,cAAA;IAAAW,WAAA,AAcE,iBAAAM,aAAA,AAAAjF,gBAAwBwB;IAAxByD,iBAAA,AAAAtE,4BAAAsE;aAAA,AAAArE,4CAAAqE,eAAA,pEAAcC;AAAd,AACE,GAAU,AAACC,6CAAED,OAAOpB;AAApB;AAAA,AACE,sFAAA,yOAAA,4DAAA,3XAAClC,0DAAMJ,YAAOK,mEAAW,AAACvB,mCAAU,AAAA,2FAAWwD,gHAAcA,2DAAW,gDAAA,hDAACZ,+GAAgBa;;;AAF7F,0FAAA,6DAAA,2CAAA,uEAAA,mFAAA,oJAAA,3PAISgB,8UAEJxD,0CAAiBC,4BACnB,kBAAM,iBAAA4D,oBAAKtB;AAAL,AAAA,oBAAAsB;AAASrB;;AAATqB;;2tDAPT,mFAAA,2JAAA,2CAAA,kEAAA,mFAAA,noEAOG,AAAA,mFAAA,iDAAA,8IAAA,mFAAA,iDAAA,uHAAA,2CAAA,qDAAA,qBAAA,mFAAA,oIAAA,2CAAA,wDAAA,sBAAA,sBAAA,2CAAA,wDAAA,+VAAA,sIAAA,+JAAA,x/CAEIC,+CAAqB7D,mOAEnB8D,ohCAIFC,uCAAa/D,+FAAQgE,wCAAchE,sXAEhCwD,+PAEL,AAACS,8CACA,AAACC,oDAAY,WAAKC,IAAIzI;AAAT,AACE,IAAA0I,aAA0B,AAACE,qCAAgB5I;IAA3C0I,iBAAA,AAAAjF,4BAAAiF;kBAAA,AAAAhF,4CAAAgF,eAAA,zEAAOC;IACDE,oBAAkB,iBAAAC,WAAQ9I;IAAR8I,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,oCAAAA,pCAAUC;IAAVD,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,qCAAAA,rCAAyBF;AAAzB,AAAA,GAAA,CAAAE,gBAAA;AAAA;;AAAA,OAAA,mFAAAA;;;AADxB,AAAA,2BAAA,mFAAA,mDAAA,2CAAA,wDAAA,mFAAA,SAIiB,0MAAA,AAAA,2BAAA,nNAAM,AAAA,+IAAuC,AAACC,oCAAe/I,sCAC7D,+BAAA,iDAAA,9DAAM2I,aAAY,CAAA,UAAe,AAACK,eAAKL,6BACvC,qCAAA,uDAAA,1EAAME,mBAAkB,CAAA,UAAe,AAACG,eAAKH,mCAC7C,iBAAAI,WAAM,iBAAAvK,mBAAI,AAACyK,+BAAanJ;AAAlB,AAAA,oBAAAtB;AAAAA;;AAAqB,IAAA0K,WAAMT;IAANS,eAAA,EAAA,CAAAA,oBAAAF,oBAAA,AAAAE,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;AAAA;;;;AAAA;;;;;IAA3BH,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;qBAPjB,gJAAA,2CAAA,oDAES,kDAAA,gDAAA,AAAAnG,rDAAK2F,qEAASpC,9QASnBgD,2CAAkBrJ;GACxBN;;AA/CrB,AAAA+H;;AAiDF,0CAAA,1CAAM6B,4FAAaC;AAAnB,kLAEO,4CAAA,WAAAC,vDAACC,rHACD,AAACA,4CAAI,oEAAA,pEAACE,gDAAQC,zJACd,yDAAA,lDAACC;AAFD,AAAM,sDAAAL,iBAAA,hEAACE,oEAAWV;GADlBO;;AAUP,iDAAA,jDAAMO,0GAAuBC;AAA7B,AAAA,0FAAA,iJACuDA;;AAEvD,AAAA,uCAAA,+CAAA3J,tFAAMiK;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,0EAAAF;;;AAAA,AAAA,CAAA,4EAAA,5EAAME,uFAAexG;AAArB,AAAA,0FAAA,mOAAA,mFAAA,6FAAA,2CAAA,wDAAA,6BAAA,2DAAA,YAAA,oDAAA,eAAA,kEAAA,eAAA,mFAAA,qDAAA,2CAAA,gEAAA,UAAA,+CAAA,0NAAA,8DAAA,kCAIG,6CAAA,mFAAA,hIAAC4G,yNAA2B5G;;;AAJ/B,CAAA,+DAAA,/DAAMwG;;AAAN;AAAA,CAAA,yDAAA,WAAAC,pEAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAMA,sCAAA,tCAAMI,oFAAYC;AAAlB,AAAA,0FAAA,6PAAA,mFAAA,4KAAA,mFAAA,oKAAA,2CAAA,wDAAA,hXAE0D,AAAWA,oZAGjE,iBAAA,2MACO,AAASA,3BACTE,jDACA,6CAAA,IAAA,jDAACC,jEACD,AAACC,6CAAKC,3GACN,yDAAA,lDAACnB;gBALR,GAAA,CAAAe,kBAMSrK;AANT,QAAAqK,JAMkBlI;AANlB,AAAA;;AAAA,AAAA,MAAAkI;;;cAOD,iBAAA5D,qBAAiB,AAAQ2D;AAAzB,AAAA,GAAA,CAAA3D,sBAAA;AAAA;;AAAA,WAAAA,PAAYiE;AAAZ,AAAA,0FAAA,6DAAA,mFACcC,iCAAQD;;;;AAEzB,AAAKE,yCAAc,iBAAAC,WAAO,qCAAA,rCAACC;AAAR,AAAA,GAAA,GAAA,CAAAD,YAAA;AAAA,QAAAA,SAAA;;AAAAnK;;;AAEnB,8FACWwK;;AADX,kBAAAH,dAGyBI;AAHzB,AAAA,MAKsBA;;AALtB,AAAA;AAAA,sBAAA,iBAAAH,tCAMqBI,iDAAcD;AANnC,AAAA,GAAA,GAAA,CAAAH,YAAA;AAAA,QAAAA,SAAA;;AAAAtK;;;;AAAA,CAAA,eAAA,WAAA,AAAA6B,1BAO8B8I,0CAAkBD;;;AAPhD,AAAA,CAAA,AAAA,AAAUH,qEASR;;AAAA,AAAA,YAAA,RAAoB7M;AAApB,AACmB,OAAC8D,oBAAUkJ,mBAAOhN,MACP,WAAK+D,EAAEA,MAAEA,MAAEmJ;AAAX,AACE,IAAAC,qBAAQnN;IAARoN,mBAAA,CAAAD,mBAAA;AAAA,AAAA,OAAAC,sBAAAD,mBAAA,WAAkCD;;;;AAZpE,CAAA,AAAA,AAAUL,wEAaR;;AAAA,AAAA,YAAA,RAAuB7M;AAAvB,AAA6B,OAACgE,uBAAagJ,mBAAOhN;;;AAbpD,CAAA,AAAA,AAAU6M,0DAcR,WAAkBE;;AAAlB,AAAA,YAAA,RAAa/M;AAAb,AACQ,IAAAqN,aACwCrN;IADxCqN,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAArK,gCAAA,AAAAqK,+BAAA,KAAA,OAAA,QAAA,AAAAlM,8CAAAmM,mBAAAD,YAAAA;IAAAE,aAAA,iBAAAC,WAAAH;AAAA,AAAA,GAAA,GAAA,CAAAG,YAAA;AAAA,QAAAA,SAAA;;AAAAlL;;;IAAAiL,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAvK,gCAAA,AAAAuK,+BAAA,KAAA,OAAA,QAAA,AAAApM,8CAAAmM,mBAAAC,YAAAA;YAAA,iBAAAE,WAAAF,pCAAqBvB;AAArB,AAAA,GAAA,GAAA,CAAAyB,YAAA;AAAA,QAAAA,SAAA;;AAAAnL;;;IAAAoL,aAAA,iBAAAC,WAAAN;AAAA,AAAA,GAAA,GAAA,CAAAM,YAAA;AAAA,QAAAA,SAAA;;AAAArL;;;IAAAoL,iBAAA,EAAA,EAAA,GAAA,CAAAA,cAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1K,gCAAA,AAAA0K,+BAAA,KAAA,OAAA,QAAA,AAAAvM,8CAAAmM,mBAAAI,YAAAA;eAAA,iBAAAE,WAAAF,vCACqBvI;AADrB,AAAA,GAAA,GAAA,CAAAyI,YAAA;AAAA,QAAAA,SAAA;;AAAAtL;;;AAAA,AAEE,oBAAI0J;AACF,6DAAA,tDAAC6B,yIAAc9B,oCAAWC;;AAC1B,2DAAA,pDAAQ8B,yDACA,AAAA,wCAAA,vCAAatB,kDAAyBQ,6BAAS7H;;;AAErE,IAAA4I,iBAAQlB;AAAR,AAAA,CAAAkB,eAAA,8BACkC,WAAK/B;AAAL,AAAA,kBAAuBA;;;AADzD+B,AAGA,gDAAA,hDAAKC;AAEL,4CAAA,5CAAMC;AAAN,AACE,OAACjD,gDAAQ9H,sBAAO,AAACgL,2CAAiB,qCAAA,rCAACxB;;AAGrC,uCAAA,vCAAMyB,sFAAaC;AAAnB,AACE,OAACC,sCAAyCD;;AAG5C,uCAAA,+CAAAE,tFAAME,+FAA0B5D;AAAhC,AAAA,IAAA2D,aAAAD;IAAAC,iBAAA,AAAAzJ,4BAAAyJ;cAAA,AAAAxJ,4CAAAwJ,eAAA,rEAAsBE;AAAtB,OAEM,AAACC,MAAS,CAAA,qDAAcD,SAAQ,uBAAA,6DAAA,lFAAM,AAAC5C,cAAIjB,OACT,CAAA,IAAS,AAACD,wCAAYC,zIACxD,+KAAA,WAAA+D,jMACA;AADA,AAAQ,OAAAA;SACR,WAAAC;AAAA,AAAQ,IAAA,AAAK,4CAAAA,rCAACT;gBAAN,GAAA,CAAAU,kBACYjN;AADZ,QAAAiN,JACqBC;AADrB,AAEO,cAAA,aAAA,qDAAAF,hFAACG,wDAAyDN,mDAA8BK;;AACxF,sDAAAF,/CAACzD;;AAHR,AAAA,MAAA0D;;;;;AAKd,uCAAA,+CAAAG,tFAAME,+FAA8ClC;AAApD,AAAA,IAAAiC,aAAAD;IAAAC,iBAAA,AAAAnK,4BAAAmK;UAAA,AAAAlK,4CAAAkK,eAAA,jEAAuC7D;aAAvC,AAAArG,4CAAAkK,eAAA,pEAA2CE;AAA3C,AACE,oBAAI/D;AACF,IAAA,AACE,OAAC+C,qCAAY/C;gBADf,GAAA,CAAAgE,kBAESxN;AAFT,QAAAwN,JAEkBN;AAFlB,AAGI,OAAC5L,sBAAO8J,YAAO8B;;AAHnB,AAAA,MAAAM;;;;AAIA,OAACjE,+CAAsBgE;;;AAE3B,yCAAA,iDAAAE,1FAAME,mGAAgEI;AAAtE,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAxK,4BAAAwK;aAAAA,TAA0BE;iBAA1B,AAAAzK,4CAAAuK,eAAA,xEAAoDG;WAApD,AAAA1K,4CAAAuK,eAAA,lEAA+DI;AAA/D,AACE,IAAAE,gBAAA,AAAAxH,8BAAA;AAAA,AAAA,IAAAC,2BAAAjE;AAAA,AAAA,GAAA,CAAAiE,4BAAA;AAAA;AAAA,IAAAC,yBAAAD;AAAA,AAAA,GAAA,CAAA,AAAAuH,6BAAA,AAAAtH;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAkH,2BAAA,AAAAtH;;;AAAA,IAAAuH,YAAA,CAAA,AAAAD,yBAAA;iBAAA,EAAA,EAAAC,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,2DAAA,CAAAA,cAAA,7KAAaI,0GAAM,AAACC,6CAAKP;kBAAzB,EAAA,EAAAG,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,jLACa5C,2GAAO,gDAAA,hDAACrF;iBADrB,EAAA,EAAAkI,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,kHAAA,CAAAA,cAAA,pOAEaM,0GAAM,AAACvI,gDAAO,AAACuH,qCAAYM,OAAOxC;uBAF/C,EAAA,EAAA6C,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,iEAAA,CAAAA,cAAA,zLAGaO,gHAAY,AAACF,6CAAKR;eAH/B,EAAA,EAAAI,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,jGAIaQ,wGAAS,kBAAA,AAAAjM,mCAAA,nBAAOgM,mBACL,WAAKvF;AAAL,AACE,OAAO,qCAAA,AAAAzG,rCAACqK,qDAAQ2B,kBAAYvF,WACrB,WAAKyF;AAAL,AACE,OAACtK,mDAAMmK,WAAMI,6CAA2BD,KAAKzF;;UARhF,CAAAgF,cAAA,tBAIsB;wBAJtB,EAAA,EAAAC,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,8PAAA,CAAAA,cAAA,vXASaW,iHAAa,AAAC5I,gDAAO,4CAAA,AAAAxD,4BAAA,yFAAA,jKAACY,4DAAKmL;kBATxC,EAAA,EAAAL,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,pGAUaY,2GAAY,WAAKC;AAAL,AACE,oBAAI,AAAUA;AACZ,4FAAA,qFAAA,1KAAC1K,mDAAMwK,kBAAavK;;AACpB,6FAAA,tFAACD,mDAAMwK,kBAAaG;;IAbjD,CAAAd,cAAA;gBAAA,EAAA,EAAAC,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,OAAA,zGAcae;AAdb,AAcwB,6FAAA,tFAAC5K,mDAAMwK,kBAAaG;IAd5C,CAAAd,cAAA;aAAA,EAAA,EAAAC,eAAA,AAAA5J,cAAA,AAAA2J,6BAAA,SAAA,CAAAA,cAAA,OAAA,WAAAE,jHAea3G;AAfb,AAeqB,oBAAA2G;AACE,GAAM,QAAAc;AAAN,AACE,0BAAA,1BAACC,oCAAuCL;;AACxC,iCAAA,1BAACK,kCAAqCF;;AAFxC;;;AAGA,GAAM,QAAAC;AAAN,AACE,6BAAA,7BAACE,uCAA0CN;;AAC3C,oCAAA,7BAACM,kCAAqCH;;AAFxC;;;IAnBvB,CAAAf,cAAA;IAAAG,WAAA;AAsBE,GAAU,kDAAA,AAAA5L,lDAACmF,6CAAEoG,qBAAMM;AAAnB;AAAA,AAEE,AAAC9M,sBAAO8M,WAAMN;;AACd,AAACxM,sBAAOiN,iBAAYV;;AACpB,AAACvM,sBAAOgN,WAAM,AAAChB,qCAAYM,OAAOxC;;AAClC,kCAAA,lCAAC9J,sBAAO8J;;;AA3BZ,2HAAA,2CAAA,4EAAA,mFAAA,sFAAA,2CAAA,6EAAA,mFAAA,oEAAA,mFAAA,uFAAA,2CAAA,kEAAA,8HAAA,2CAAA,gGAAA,AAAA7I,hnCA4BG4M,uIAAgCX,mJAC5BvD,2IAAuBG,mbAGlB7D,kGACLuB,4JAAiC6F,0CAAeL;;;AAjCvD,AAAAH;;AAmCF,2CAAA,3CAAMiB,8FAAiBT,kBAAaU,KAAKR;AAAzC,AACE,AAAiBA;;AACjB,AAAkBA;;AAClB,IAAAS,aAAA,AAAA/M,gBAAiDoM;IAAjDW,iBAAA,AAAApM,4BAAAoM;iBAAA,AAAAnM,4CAAAmM,eAAA,xEAAcC;iCAAd,AAAApM,4CAAAmM,eAAA,xFAAyBE;IACnBC,mBAAiB,AAACC,gBAAMH;IACxBI,6BAAqB,4CAAA,AAAApN,5CAACY,4DAAKwL,mBAAaU;AAF9C,AAGE,oBAAI,iBAAA1H,oBAAK4H;AAAL,AAAA,oBAAA5H;AAAA,IAAAA,wBAAgB6H;AAAhB,AAAA,oBAAA7H;AAAqC,OAACD,6CAAE,AAACgI,gBAAML,MAAMI;;AAArD9H;;;AAAAA;;;AACF,OAACxD,mDAAMwK,kBAAa,WAAKiB;AAAL,AACE,OAAC7M,+CACA,eAAA8M,JAAKzM;AAAL,AAAA,IAAA0M,aAAAD;eAAA,AAAAE,4CAAAD,WAAA,IAAA,tEAAUT;sBAAV,AAAAU,4CAAAD,WAAA,IAAA,7EAAeE;AAAf,AACE,GAAI,uCAAA,rCAAK,AAACC,sBAAMZ,iBAAM,AAACa,wBAAQb,eAAM,AAAC3H,6CAAE,AAACgI,gBAAML,UAAMI;AACnD,OAACU,8CAAM/M,IAAIiM,SAAK,AAAChL,cAAIsL;;AACrB,OAACQ,8CAAM/M,IAAIiM,SAAKW;;GAJrB,mCAMCJ;;;AACvB,OAACzL,mDAAMwK,kBAAayB,iBAAOf,KAAKhL;;;AAGtC,6CAAA,7CAAMgM,kGAAalR;AAAnB,AACE,QAAA,MAAK,AAACuQ,gBAAMvQ;;AAGd,4CAAA,5CAAMmR,gGAAkBtH;AAAxB,AAEE,OAACf,oDAAY,WAAKC,IAAIzI;AAAT,AACE,IAAA8Q,WAAmB,oDAAA,pDAACpH,+CAAOH,0DAAW,4DAAA,5DAACyH,6CAAKC,iDAASxI;IAArDsI,WAA0D/Q;AAA1D,AAAA,4JAAA8Q,SAAAC,iEAAAD,SAAAC,vOAAC1H,2EAAAA,8FAAAA;;;AAElB,wCAAA,oFAAA,iBAAA,eAAA,sBAAA,WAAA,kBAAA,wBAAA,mBAAA,0BAAA,wBAAA,5SAAK6H;AAYL,oCAAA,pCAAMC,gFAAUZ;AAAhB,AAAA,0FAAA,kDAAA,2CAAA,2DAAA,cAAA,uNAAA,mFAAA,0DAAA,2CAAA,0DAAA,jZAEgB,CAAA,+EACK,mCAAA,aAAA,9BAAIA;;AAGzB,2CAAA,mFAAA,qDAAA,2CAAA,wDAAA,tRAAKa;AAEL,yCAAA,zCAAMC,0FAAenC,kBAAaoC,cAAc1B;AAAhD,AACE,IAAMW,kBAAU,4CAAA,AAAAzN,5CAACY,4DAAKwL,mBAAaU;IAAnC2B,aAAA,AAAAzO,gBACiDoM;IADjDqC,iBAAA,AAAA9N,4BAAA8N;iBAAA,AAAA7N,4CAAA6N,eAAA,xEACczB;iCADd,AAAApM,4CAAA6N,eAAA,xFACyBxB;IACnByB,sBAAc,iBAAAtJ,oBAAK4H;AAAL,AAAA,oBAAA5H;AAAA,IAAAA,wBAAgB6H;AAAhB,AAAA,oBAAA7H;AAAqC,OAACD,6CAAE,AAACgI,gBAAML,MAAM,AAACK,gBAAMH;;AAA5D5H;;;AAAAA;;;AAFpB,AAAA,0FAAA,wLAAA,2CAAA,6HAAA,8KAAA,0EAAA,7TAIW,uCAAA,AAAA,wBAAA,7CAAMsJ,gHACH,AAAC7H,gDAAQgG,yCAAgBT,kBAAaU;AALpD,AAMqB,4FAAA,rFAAClL,mDAAMwK,kBAAavK,iFAAkBiL;GAN3D,0EAAA;AAAA,AAOqB,6FAAA,tFAAClL,mDAAMwK,kBAAaG;WAPzC,mFAAA,0IAAA,2CAAA,gIAAA,qJAAA,mFAAA,hTASY,uCAAA,AAAA,mBAAA,xCAAMmC,yIACbL,kCAASZ,gOACwBe;;AAExC,uCAAA,kDAAAG,zFAAME,sFAAajS;AAAnB,AAAA,IAAAgS,aAAAD;IAAAC,iBAAA,AAAAjO,4BAAAiO;WAAAA,PAA2BnI;WAA3B,AAAA7F,4CAAAgO,eAAA,qDAAA,vHAAuC9B;aAAvC,AAAAlM,4CAAAgO,eAAA,pEAA4CE;wBAA5C,AAAAlO,4CAAAgO,eAAA,/EAAmDxC;AAAnD,AACE,IAAMqB,kBAAU,4CAAA,AAAAzN,5CAACY,4DAAKwL,mBAAaU;IAAnCiC,aAC4CD;IAD5CC,iBAAA,AAAApO,4BAAAoO;oBAAA,AAAAnO,4CAAAmO,eAAA,3EACcP;oBADd,AAAA5N,4CAAAmO,eAAA,3EAC4BC;AAD5B,AAAA,0FAAA,yHAAA,2CAAA,uHAAA,mFAAA,suCAAA,mFAAA,38CAGW,mCAAA,AAAA,cAAA,/BAAMvB,qLAEb,+BAAA,uKAAA,mFAAA,vRAAI,CAAA,MAAK,AAACN,gBAAMvQ,yFACb2R,uCAAcnC,kBAAaoC,cAAc1B,qJACnC0B,uBACT,6CAAA,mFAAA,hIAAC7G,yLACK,AAACsH,6CAAK,AAAClB,0CAAiBtH,MAClB,AAACyI,kDAAU,mCAAA,mFAAA,iDAAA,mFAAA,+PAAA,veAAIzB,gSAAqBa,yCAAgBlO,8BAAK,oFAAA,8BAAA,hHAAM,6CAAA,7CAAC+E,iDAAI,AAACgI,gBAAMqB,iBAAgBpO,mDACjGxD,4IAEL,iBAAAuS,WAASH;AAAT,AAAA,GAAuB,AAACI,sBAAMJ;AAAe,oDAAA,mFAAA,yDAAAG,zLAACxH;;AAA9CwH;;;;AAEP,0CAAA,kDAAAE,5FAAME,qGAAiE3P;AAAvE,AAAA,IAAA0P,aAAAD;IAAAC,iBAAA,AAAA3O,4BAAA2O;iBAAAA,bAA2BhE;YAA3B,AAAA1K,4CAAA0O,eAAA,nEAA6CE;aAA7C,AAAA5O,4CAAA0O,eAAA,pEAAmDG;uBAAnD,AAAA7O,4CAAA0O,eAAA,9EAA0DI;AAA1D,AAAA,2HAAA,jCACGC,4FACA,WAAK1D;AAAL,AAAA,0FAAA,iIAAA,2CAAA,uDAAA,2CAAA,sEAAA,IAAA,4GAAA,gEAAA,KAAA,oDAAA,aAAA,wPAAA,6DAAA,5eAEsC,iCAAA,AAAA,UAAA,zCAAM,AAAC/N,oBAAI+N,yNACtC,iCAAA,0HAAA,zJAAI,AAAC/N,oBAAI+N;AAHpB,AAMe,GAAM,AAAC/N,oBAAI+N;AAAX,AACE,QAACA,yCAAAA,qDAAAA,dAASX,iCAAAA;;AADZ;;WAC0B,CAAGkE,QAAMC,QAAQ,oCAAA,AAAA,IAAA,tBAAMC,4BAAgB,iCAAA,cAAA,7CAAI,AAACxR,oBAAI+N;;;AAE5F,sCAAA,iDAAA2D,vFAAME,oFAAYlT;AAAlB,AAAA,IAAAiT,aAAAD;IAAAC,iBAAA,AAAAlP,4BAAAkP;WAAAA,PAA0BpJ;WAA1B,AAAA7F,4CAAAiP,eAAA,qDAAA,vHAAsC/C;aAAtC,AAAAlM,4CAAAiP,eAAA,pEAA2Cf;wBAA3C,AAAAlO,4CAAAiP,eAAA,/EAAkDzD;AAAlD,AACE,IAAMqB,kBAAU,4CAAA,AAAAzN,5CAACY,4DAAKwL,mBAAaU;IAAnCiD,aAC8BjB;IAD9BiB,iBAAA,AAAApP,4BAAAoP;oBAAA,AAAAnP,4CAAAmP,eAAA,3EACcf;AADd,AAAA,0FAAA,yHAAA,2CAAA,uHAAA,mFAAA,lJAGW,mCAAA,AAAA,cAAA,/BAAMvB,qLAEb,kDAAA,4IAAA,iBAAA,mFAAA,qDAAA,rVAAI,AAACK,2CAAYlR,wFACd2R,uCAAcnC,sBAAiBU,kKAElC,6CAAA,mFAAA,hIAACnF,yLACK,AAACsH,6CAAK,AAAClB,0CAAiBtH,MAClB,AAACyI,kDAAU,mCAAA,mFAAA,iDAAA,mFAAA,uIAAA,/WAAIzB,gSAAqBa,yCAAgBlO,6CAC1DxD,IACN,iBAAAoT,WAAShB;AAAT,AAAA,GAAuB,AAACI,sBAAMJ;AAAe,oDAAA,mFAAA,yDAAAgB,zLAACrI;;AAA9CqI;;;;AAGN,yCAAA,mDAAAC,5FAAME,0FAAelG;AAArB,AAAA,IAAAiG,aAAAD;IAAAC,iBAAA,AAAAvP,4BAAAuP;WAAAA,PAA4BzJ;WAA5B,AAAA7F,4CAAAsP,eAAA,qDAAA,vHAAwCpD;wBAAxC,AAAAlM,4CAAAsP,eAAA,/EAA6C9D;AAA7C,AACE,IAAMqB,kBAAU,4CAAA,AAAAzN,5CAACY,4DAAKwL,mBAAaU;AAAnC,AACE,oDAAA,mFAAA,hIAACnF,6LACK,4CAAA,WAAAyI,vDAACzJ;AAAD,AAAM,GAAI,OAAAyJ;AACF,oBAAI3C;AACF,oDAAA,mFAAA,hIAAC9F,yLAAW,kDAAA,mFAAA,iDAAA,mFAAA,zQAACuH,yUAAsB,2BAAAkB,3BAACrI;;AACpC,oDAAA,mFAAA,hIAACJ,yLAAW,kDAAA,mFAAA,oFAAA,zNAACuH,gPAAsC,2BAAAkB,3BAACrI;;;AACtD,iKAAAqI,8EAAAA,vOAAC7J,2EAAAA,kGAAAA,zBAAkBE,8EAAAA;;IAC3B,yBAAA,vBAAI,OAASwD,mGAAIA,UAAGA;;AAE9B,gDAAA,0DAAAoG,1GAAME,wGAAsBtG;AAA5B,AAAA,IAAAqG,aAAAD;IAAAC,iBAAA,AAAA3P,4BAAA2P;WAAAA,PAAmC7J;WAAnC,AAAA7F,4CAAA0P,eAAA,qDAAA,vHAA+CxD;aAA/C,AAAAlM,4CAAA0P,eAAA,pEAAoDxB;wBAApD,AAAAlO,4CAAA0P,eAAA,/EAA2DlE;AAA3D,AACE,IAAAoE,aAA8B1B;IAA9B0B,iBAAA,AAAA7P,4BAAA6P;oBAAA,AAAA5P,4CAAA4P,eAAA,3EAAcxB;AAAd,AAAA,0FAAA,uKAAA,mFAAA,qDAGI,kBAAI,eAAA,WAAAyB,1BAACC;AAAD,AAAO,SAAK,OAAAD,mCAAY,+BAAAA,iBAAA,hDAACE;0bAHjC,mFAAA,uIAAA,thBAGI,4IAAA,kBAAA,mFAAA,qDAAA,jaAAoD,yBAAA,vBAAI,OAAS1G,mGAAIA,UAAGA,wFACrEsE,uCAAcnC,uBAAkBU,iTAGnC,AAAC7G,oCAAe,AAACkK,uCAAclG,EAAExD,YAEjCuI;;AAEN,yCAAA,zCAAM4B,0FAAeC;AAArB,AAAA,0FAAA,2GAEG,qCAAA,nBAAI,AAACC,aAAgBD,YAAW,4CAAKA;;AAExC,sCAAA,tCAAME,oFAAOC,WAAMtV,EAAEuV;AAArB,AACE,IAAAC,aAAA,AAAAlR,gBAAqCgR;IAArCE,iBAAA,AAAAvQ,4BAAAuQ;eAAA,AAAAtQ,4CAAAsQ,eAAA,tEAAcC;iBAAd,AAAAvQ,4CAAAsQ,eAAA,xEAAuBE;AAAvB,AACE,wCAAA,2CAAA,oEAAA,+DAAA,/MAACrS,sBAAOiS,wHAAmBtV,+DACFuV,mEACE,kRAAA,hRAAI,AAAC9L,6CAAEgM,SAASF,IAAG,8GAAA,qDAAA,jKAAI,wDAAA,xDAAC9L,6CAAEiM;;AAEzD,qCAAA,6CAAAC,SAAAC,3FAAMG;AAAN,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAA5Q,4BAAA4Q;iBAAA,AAAA3Q,4CAAA2Q,eAAA,xEAAyBG;iBAAzB,AAAA9Q,4CAAA2Q,eAAA,xEAAoCH;IAApCI,aAAAF;IAAAE,iBAAA,AAAA7Q,4BAAA6Q;WAAAA,PAAsDrJ;WAAtD,AAAAvH,4CAAA4Q,eAAA,lEAAkEG;WAAlE,AAAA/Q,4CAAA4Q,eAAA,lEAAuEI;AAAvE,AACE,IAAAC,WAAQ1J;AAAR,AAAA,oBACEwJ;AAAK,qDAAAE,SAAA,vDAACjE,2GAAY,cACK,gDAAA,WAAAkE,3DAACC,dAGD1Q;AAHA,AAAU,IAAA2Q,WAAQ,4CAAAF,5CAAClR,6DAAM8Q;AAAf,AAAA,GACE,OAASO;AADX,iCAAAD,1BACgBE;;AADhBF;;GAED,8GAAA,WAAAG,iBAAAC,xIAAI,wDAAA,xDAACjN,6CAAEiM;AAAP,AAAyB,yBAAAe,iBAAAC,nCAACG;GAA1B,WAAAF,iBAAAC;AAAA,AAA0C,yBAAAA,iBAAAD,nCAACE;IAHpDX;;AADzBC;;;AAOF,kCAAA,mFAAA,mEAAA,2CAAA,wDAAA,6BAAA,2DAAA,YAAA,oDAAA,uBAAA,mFAAA,qDAAA,2CAAA,gEAAA,UAAA,+CAAA,qMAAA,8DAAA,z/BAAKW;AAIL,sCAAA,mFAAA,mEAAA,2CAAA,wDAAA,6BAAA,2DAAA,YAAA,oDAAA,uBAAA,mFAAA,qDAAA,2CAAA,gEAAA,UAAA,+CAAA,qHAAA,8DAAA,76BAAKC;AAIL,8CAAA,sDAAAC,pGAAME;AAAN,AAAA,IAAAD,aAAAD;WAAA,AAAAlF,4CAAAmF,WAAA,IAAA,lEAA2BxK;AAA3B,AAAA,0FAAA,4PAAA,mFAAA,gKAAA,sBAAA,mFAAA,gFAAA,gFAAA,mFAAA,uEAAA,mFAAA,gIAAA,mJAAA,mFAAA,gFAAA,0DAAA,mFAAA,kGAAA,mFAAA,sIAAA,oHAAA,2CAAA,4DAAA,mFAAA,IAAA,YAAA,6DAAA,mFAAA,IAAA,oCAAA,mFAAA,kGAAA,mFAAA,sIAAA,oHAAA,mFAAA,2CAAA,4DAAA,IAAA,6DAAA,YAAA,2CAAA,4DAAA,IAAA,6DAAA,oCAAA,mFAAA,kGAAA,mFAAA,sIAAA,oHAAA,mFAAA,mFAAA,IAAA,YAAA,mFAAA,IAAA,oCAAA,mFAAA,kGAAA,mFAAA,sIAAA,oHAAA,2CAAA,qDAAA,mFAAA,4DAAA,qEAAA,oDAAA,mFAAA,mFAAA,IAAA,YAAA,mFAAA,IAAA,3pIAO4BqK,2HACvBjM,2CAAkB4B,olBAGOsK,+HACzBrK,qwBAGyBqK,+HACzBrK,s1BAEyBqK,+HACzBrK,orBAEyBqK,+HACzBrK;;AAIL,0CAAA,kDAAAyK,5FAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAnS,4BAAAmS;UAAA,AAAAlS,4CAAAkS,eAAA,jEAA8BE;YAA9B,AAAApS,4CAAAkS,eAAA,nEAAkCG;AAAlC,AAAA,0FAAA,iKAEG,6CAAA,mFAAA,hIAACtL,2LAEA,AAAChB,4CACA,WAAAuM;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxS,4BAAAwS;UAAAA,NAAUC;WAAV,AAAAxS,4CAAAuS,eAAA,lEAAqBE;cAArB,AAAAzS,4CAAAuS,eAAA,rEAA0BG;WAA1B,AAAA1S,4CAAAuS,eAAA,lEAAkChL;aAAlC,AAAAvH,4CAAAuS,eAAA,pEAAuCI;AAAvC,AAAA,0FAAA,wIAAA,mFAAA,uEAAA,0BAAA,mFAAA,kGAAA,mFAAA,4DAAA,jVAEgCF,kLACRC,kPACTlL,iCAAQD;SAT5B,mFAAA,8FAAA,mFAAA,1QAUK6K,+UAGA,6CAAA,mFAAA,hIAACrL,8LACK,AAAChB,4CAAI,WAAA6M;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAhG,4CAAAiG,WAAA,IAAA,lEAAMC;SAAN,AAAAlG,4CAAAiG,WAAA,IAAA,hEAAWE;WAAX,AAAAnG,4CAAAiG,WAAA,IAAA,lEAAcG;WAAd,AAAApG,4CAAAiG,WAAA,IAAA,lEAAmBI;AAAnB,AAAA,0FAAA,6GAAA,mFAAA,qFAAA,YAAA,mFAAA,8FAAA,mFAAA,rRAEwBD,qLACAC,qKACNH;IACvBT;;AAEX,4CAAA,5CAAMa,gGAAkBC;AAAxB,AAAA,0FACGhB,wCAAegB;;AAElB,AAAA,+CAAA,uDAAAzW,tGAAM2W;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxW,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAMwW,wFACFG,IAAIC;AADR,AACe,kFAAA,2CAAA,0DAAA,hLAACC,6LAAmCF,IAAIC;;;AADvD,CAAA,6EAAA,WAAAH,xFAAMD,iGAEeG,IAAIC;AAFzB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAxT,4BAAAwT;mBAAA,AAAAvT,4CAAAuT,eAAA,1EAEYI;AAFZ,AAAA,0FAAA,yHAAA,mFAAA,uEAIoBH,YAAK,gCAAA,8BAAA,5CAAMG,cAAOnU,oCAAMiU;;;AAJ5C,CAAA,uEAAA,vEAAMJ;;AAAN,AAMA,GAAA,QAAA9Q,wCAAAC,8CAAAC,qDAAAmR;AAAA;AAAA,AAAA,AAASC,qCAAK,iDAAA,jDAACC;;AACf,GAAA,QAAAvR,wCAAAC,8CAAAC,qDAAAsR;AAAA;AAAA,AAAA,AAASC,uCAAO,iDAAA,jDAACF;;AACjB,GAAA,QAAAvR,wCAAAC,8CAAAC,qDAAAwR;AAAA;AAAA,AAAA,AAASC,yCAASC;;AAElB,6CAAA,7CAAMC,kGAAcC,MAAMC;AAA1B,AAEE,AAACtT,mDAAMkT,uCAASjT,gBAAMoT,MAAM,AAAC5T,cAAI6T;;AAFnC,AAAA;;AAKA,AAAA,AAEA,sDAAA,tDAAMC,oHAAsBjY;AAA5B,AAA+B,OAACkY,+CAAqBlY;;AACrD,AAAA,6CAAA,qDAAAI,lGAAMiJ;AAAN,AAAA,IAAA8O,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA9O,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9I,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAM8I,sFACFrJ;AADJ,AAEG,IAAAoY,gBAAA,AAAArR,8BAAA;AAAA,AAAA,IAAAC,2BAAAjE;AAAA,AAAA,GAAA,CAAAiE,4BAAA;AAAA;AAAA,IAAAC,yBAAAD;AAAA,AAAA,GAAA,CAAA,AAAAoR,6BAAA,AAAAnR;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAA+Q,2BAAA,AAAAnR;;;AAAA,IAAAoR,YAAA,CAAA,AAAAD,yBAAA;wBAAA,EAAA,EAAAC,eAAA,AAAAzT,cAAA,AAAAwT,6BAAA,SAAA,CAAAA,cAAA,mLAAA,CAAAA,cAAA,5SAAalJ,iHAAa,AAAC5I,gDAAO,AAAA,uHAA0BtG;IAA5DsY,WAAA,AAAA,8HAAA,2CAAA,tFACGjP,4JAAiC6F,0BAAclP;AADlD,AAAAsY;;;AAFH,CAAA,2EAAA,3EAAMjP,sFAIFE,KAAKvJ;AAJT,AAKG,oBAAI,AAACiY,oDAAqBjY;AACxBA;;AACA,IAAAuY,aAAyCvY;IAAzCuY,iBAAA,AAAA9U,4BAAA8U;YAAA,AAAA7U,4CAAA6U,eAAA,nEAA0BpB;aAA1B,AAAAzT,4CAAA6U,eAAA,pEAAgC3G;AAAhC,AAAA,2BAAA,ohBAAA,2CAAA,oDAGS,wIAAA,3FAAK,AAAA,kFAAOA,yDAAY,AAAC4G,eAAK,AAAA,mFAAOjP,1zBAC3C,AAAA,4FAAYqI,QAAQuF,MAAM,sNAAA,2CAAA,jQAACsB,uGAAMlP,KAAK,AAAA,uGAAmBvJ,uGAAY4R;;;;AAX7E,CAAA,qEAAA,rEAAMvI;;AAAN,AAaA,4CAAA,5CAAMqP,gGAAkBvB,MAAM5N;AAA9B,AACE,OAAUoP,gBAAW,AAACC,+DAAezB,MAAM5N;;AAE7C,mCAAA,nCAAM2B,8EAASiM;AAAf,AACE,IAAA0B,gBAAA,AAAA9R,8BAAA;AAAA,AAAA,IAAAC,2BAAAjE;AAAA,AAAA,GAAA,CAAAiE,4BAAA;AAAA;AAAA,IAAAC,yBAAAD;AAAA,AAAA,GAAA,CAAA,AAAA6R,6BAAA,AAAA5R;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAwR,2BAAA,AAAA5R;;;AAAA,IAAA6R,YAAA,CAAA,AAAAD,yBAAA;kBAAA,EAAA,EAAAC,eAAA,AAAAlU,cAAA,AAAAiU,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,jLAAavU,2GAAO,gDAAA,hDAACgC;IAArByS,WAAA;AACE,GAAM,AAAC/S,gDAAK,AAAA,oFAAA,AAAAlD,6BAAA,bAASwB,4HAAoB6S;AAAzC,AACE,sFAAA,8GAAA,pMAACzS,0DAAMJ,YAAOK,sEAAawS,6GAAY,AAACyB,+DAAezB;;AADzD;;AADF,2HAAA,2CAAA,5EAGGzH,uIAAgC,WAAKtB;AAAL,AACE,OAAO,AAACsK,0CAAiBvB,MAAM/I,iBACxB,WAAKY;AAAL,AACE,8FAAA,vFAACtK,0DAAMJ,YAAOqM,sEAAa1B,+FAA2BD,KAAKZ;;WANzG,mFAOI/E,2CAAkB,AAAA,mFAAA,AAAAvG,gBAAQwB;;;AAP9B,AAAAyU;;AASF,gCAAA,hCAAMC;AAAN,AAAA,0FAAA,iDAAA,8HAAA,AAAAlW,3CAEIuG,2DAAmBkO,4CACpB,kBAAA,AAAAzU,uDAAA,AAAA,mFAAA,qHAAA,8HAAA,AAAAA,sEAAA,nbAAO4U,kUAEHrO,2DAAmBqO;;AAE1B,AAAA,AAEA,6CAAA,6DAAAuB,1GAAME,kGAAcC;AAApB,AAAA,IAAAF,aAAAD;eAAA,AAAA3I,4CAAA4I,WAAA,IAAA,tEAA6BG;YAA7B,AAAA/I,4CAAA4I,WAAA,IAAA,nEAAsCI;AAAtC,AACE,oBAAQF;AAAR;AAAA,AAAA,MAAA,KAAA7Y,MAAA,CAAA,kBAAA,sBAAA,KAAA;;;AACA,IAAAgZ,qBAAsB,AAACE,iBAAYL,QAAQC;AAA3C,AAAA,oBAAAE;AAAA,mBAAAA,fAASC;AAAT,AACE,6BAAA,AAAA1W,tBAACjB,sCAAQ2X,cAAaF;;AACtB,OAACI,8CAAWN,QACA,AAACO,iDAAc,AAACC,+CAAO,AAACC,oBAAUR,YAClC,AAACO,+CAAO,AAAC5Q,eAAKqQ,WACd,2EAAA,2CAAA,tHAACS,oBAAU,AAACxT,gDAAOgT,+GACND;;;AAE7B,qCAAA,6CAAAU,lFAAeE;AAAf,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAvW,4BAAAuW;YAAAA,RAA+BV;UAA/B,AAAA5V,4CAAAsW,eAAA,jEAA4CE;YAA5C,AAAAxW,4CAAAsW,eAAA,nEAAgDrP;qBAAhD,AAAAjH,4CAAAsW,eAAA,5EAAsDG;cAAtD,AAAAzW,4CAAAsW,eAAA,rEAA+DZ;AAA/D,AACE,IAAAgB,mBAAA,AAAA5P,cAAiB,mDAAA,mFAAA,6EAAA,nNAACwQ,+CAAOd;IAAzBG,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,qBAAA,AAAAD,wDAAAE,zEAAQQ;AAAR,AAAA,AACE,AAAC5B,2CAAaC,QAAQ2B;;AADxB;AAAA,eAAAX;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAhQ,cAAA4P;AAAA,AAAA,GAAAI;AAAA,AAAA,IAAAJ,uBAAAI;AAAA,AAAA,GAAA,AAAAC,6BAAAL;AAAA,IAAAM,wBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAzK,gBAAAyK;eAAA;;;;;;;AAAA,qBAAA,AAAAG,gBAAAT,jCAAQW;AAAR,AAAA,AACE,AAAC5B,2CAAaC,QAAQ2B;;AADxB;AAAA,eAAA,AAAAD,eAAAV;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAEA,oBAAMD;AAAN,AACE,AAACzV,mDAAM2B,4CAAc4U;;AADvB;;AAEA,GAAM,gCAAA,hCAACC,0BAAU5B;AAAjB,AACE,AAACzX,sBAAO0V,mCAAK2C;;AADf;;AAEA,AAACrY,sBAAO6V,qCAAO/M;;AACf,IAAA6P,qBAAiB,iBAAAtS,oBAAK,QAAAqH;AAAL,AAAA,GAAArH;AAA2B,OAAA,oFAAA,oCAAIgS,pCAAInR;;AAAnCb;;;AAAjB,AAAA,oBAAAsS;AAAA,AAAA,YAAAA,RAAWzW;AAAX,AACE,QAAM,AAASwL,iBAAaxL;;AAD9B;;;;AAGF,AAAA,yCAAA,iDAAA3D,1FAAM+a;AAAN,AAAA,IAAAnR,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAmR,4EAAA,CAAA,UAAA,MAAAhR;;;AAAA,AAAA,CAAA,8EAAA,9EAAMgR,yFAAUI,KAAOC;AAAvB,AACE,AAAC1b,8CAAM2b,qBAAMF,KAAKC;;AAClB,IAAAjC,qBAAkB,AAAA,2FAAA,eAAIgC,fAAKG;AAA3B,AAAA,oBAAAnC;AAAA,eAAAA,XAASF;AAAT,AAEE,OAACsC,QAAW,wGAAA,2CAAA,qDAAA,uDAAA,sEAAA,qgBAAA,10BAACC,4TAA+BvC,8DAAe,0CAAA,1CAACwC,6HAAsB,KAAAC,eAAA,KAAA,AAAA,oDAAA,KAAAA,eAAA,KAAA,mFAAA,AAAA,4DAAA,KAAAA,eAAA,KAAA,AAAAhZ,sBAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,rCAAgByY,wGAAa,AAACM,0CAAqB,KAAAC,eAAA,KAAA,AAAA,6DAAA,KAAAA,eAAA,sJAAA,KAAA,IAAA,OAAA,IAAA,rKAAe,KAAAA,eAAA,KAAA,AAAA,2DAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,OAAA,IAAA,7BAAazC;;AACjK,oBAAA,bAAC0C;;;;AALL,CAAA,iEAAA,jEAAMZ;;AAAN;AAAA,CAAA,2DAAA,WAAAC,tEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAR,gBAAAO;IAAAA,eAAA,AAAAN,eAAAM;AAAA,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAAD,SAAAD;;;AAAA,AAOA,iDAAA,yDAAAY,1GAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAxY,4BAAAwY;YAAAA,RAA6B7M;WAA7B,AAAA1L,4CAAAuY,eAAA,lEAA0CE;eAA1C,AAAAzY,4CAAAuY,eAAA,tEAA8C5C;WAA9C,AAAA3V,4CAAAuY,eAAA,lEAAuDG;AAAvD,AACE,0EAAA,AAAAtZ,nEAAChD,8CAAM2b,qCAAOU,MAAIC;;AAEpB,oCAAA,4CAAAC,hFAAeE;AAAf,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA7Y,4BAAA6Y;UAAAA,NAA8BE;WAA9B,AAAA9Y,4CAAA4Y,eAAA,lEAAyCnG;AAAzC,AACE,IAAMsG,cAAY,iBAAAC,WAECvG;IAFDwG,WAGC,WAAKxG;AAAL,AACE,OAAC4F,aAAgB,CAAA,2JAAA,vHAAyC,AAACH,wGAAOzF;;IAJrEyG,eAAA,2CAAA,oGAAA,nCAAc3C,0FACLiC;AADT,AAAA,QAAAU,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;AAAlB,AAME,QAACF,4CAAAA,iDAAAA,PAAYD,6BAAAA;;;AAEjB,GAAA,QAAAvW,wCAAAC,8CAAAC,qDAAA0W;AAAA;AAAA,AAAA,AAASC,sCACP,iBAAAtC,qBAAc,iBAAAtS,oBAAK,QAAAqH;AAAL,AAAA,GAAArH;AAA2B,+BAAA,xBAAC8U;;AAA5B9U;;;AAAd,AAAA,oBAAAsS;AAAA,AAAA,SAAAA,LAAWuC;AAAX,AACE,OAACE,gDAAwBF;;AAD3B;;;;AAGF,iCAAA,jCAAgCG;AAAhC,AACE,oBAAMJ;AAAN,AACE,OAASA,2CAAW,sDAAA,tDAACtQ,yIAAcwM;;AADrC;;;;AAGF,sCAAA,tCAAMmE,oFAAYC;AAAlB,AACE,OAAcC,oBAAY,wGAAA,2CAAA,qDAAA,sDAAA,9PAACzB,oTAA0BwB;;AAEvD,wCAAA,2DAAAE,nGAAME,wFAAcC;AAApB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAA9Z,4BAAA8Z;oBAAA,AAAA7Z,4CAAA6Z,eAAA,3EAAuCG;AAAvC,AAAA,0FAAA,qDAAA,2CAAA,2FAAA,2CAAA,wDAC4C,AAACC,sEAAqBF,WAAW,gBAAoB,AAAC7Y,cAAI8Y;;AAEtG,uCAAA,vCAAME,sFAAaC;AAAnB,AACE,OAACrR,sDACA,8BAAA,mFAAA,qDAAA,2CAAA,2FAAA,2CAAA,rVAAI,OAASqR,sYAC+BA,+BAC1CA;;AAEL,uCAAA,2CAAA,lFAAKC,gJACSF;AAEd,AAAKG,gCACH,AAACpU,gDAAQqU,qCAAmBF;AAE9B,0CAAA,1CAAMG,4FAAgBje;AAAtB,AACE,OAACwM,sDAAa,iBAAA0R,WAAQle;AAAR,AAAA,GAAU,AAACgB,oBAAIhB;AAAf,YAAAme,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAAD,UAAA;;AAAAA;;;;AAGhB,AAAKE,0CAAeH;AAEpB;;;uCAAA,vCAAMI,sFAEHC;AAFH,AAGE,IAAMC,eAAa,AAAC3R;IACdtI,cAAO,mCAAA,nCAACjD;AADd,AAEE,AAACmd,kEAAW;AAAA,OACMF,AACA,OAAA,WAAAG,zBACA;AADA,AAAQ,yCAAAA,lCAAC5c,sBAAOyC;UACRia;GAH1B;;AAFF,OAAAzb,gBAOGwB;;AAEL,0CAAA,1CAAUoa,4FAAgBC;AAA1B,AACE,IAAML,IAAE,wCAAA,xCAAC9d;AAAD,AAAgB,OAACV,8CAAM8e,uDACA,iBAAAC,WAAQF;AAAR,AAAA,GACE,OAASA;AADX,YAAA7C,eAAA,KAAA+C,SAAA,KAAA,IAAA;;AAAAA;;;GADvB,CAImB,4CAAKF;AAJhC,AAKE,OAACN,qCAAYC;;AAEjB,2CAAA,mDAAAQ,9FAAME,uGAC2DhgB;AADjE,AAAA,IAAA+f,aAAAD;IAAAC,iBAAA,AAAAtb,4BAAAsb;eAAA,AAAArb,4CAAAqb,eAAA,tEAA+BJ;mBAA/B,AAAAjb,4CAAAqb,eAAA,1EAAuCE,+IACGtS;AAD1C,AAEE,IAAA4M,qBAAiB,AAACmF,wCAAeC;AAAjC,AAAA,oBAAApF;AAAA,mBAAAA,fAASoF;AAAT,AACE,QAAC3f,kCAAAA,gDAAAA,hBAAE2f,4BAAAA;;AACHM;;;AAEJ,4CAAA,5CAAMC,gGAAkB/H;AAAxB,AACE,IAAMoH,eAAa,AAAC3R;IACduS,aAAW,wCAAA,xCAACT;IACZ5W,SAAO,4CAAA,WAAAsX,vDAACve;AAAD,AAAoB,oBAAAue;AAAA,OACM,iBAAAA,jBAAQD,kCAAa,AAACE,qBAAQ,qDAAA,rDAACC,+CAAOnI,qEAAoB,AAACkI,qBAAQ,AAAA,iGAAA,NAAalI,lSAChF,oVAAQoH;;AAFd;;GAApB,CAGuBpH,MAAMgI;AAL1C,AAME,oBAAMhI;AAAN,AACE,oBAAIgI;AAAJ,0FAAA,oFAAA,mFAAA,uEAAA,2CAAA,mDAEyBrX;;AACvB6E;;;AAJJ;;;AAMJ,yCAAA,zCAAM4S,0FAAepI;AAArB,AACE,IAAMqI,SAAO,wCAAA,xCAACd;IACR5W,SAAO,4CAAA,WAAA2X,vDAAC5e;AAAD,AAAoB,oBAAA4e;AAAA,AACE,sBAAAA,fAAUD,gCAAS,AAACH,qBAAQlI;;AAD9B;;GAApB,CAEuBA,MAAMqI;AAH1C,AAIE,oBAAMrI;AAAN,AACE,oBAAIqI;AAAJ,0FAAA,oFAAA,mFAAA,kEAAA,2CAAA,mDAEsB1X;;AACpB6E;;;AAJJ;;;AAMJ,AAAK+S,0CAAeC;AACpB,AAAKC,uCAAYC;AAEjB,uCAAA,mFAAA,kDAAA,2CAAA,wDAAA,6BAAA,2DAAA,YAAA,oDAAA,eAAA,uDAAA,KAAA,yDAAA,aAAA,mFAAA,qDAAA,2CAAA,gEAAA,UAAA,+CAAA,qHAAA,8DAAA,vhCAAKC;AAIL,8CAAA,9CAAMC,oGAAoBC;AAA1B,AACE,IAAAC,gBAAA,AAAAlZ,8BAAA;AAAA,AAAA,IAAAC,2BAAAjE;AAAA,AAAA,GAAA,CAAAiE,4BAAA;AAAA;AAAA,IAAAC,yBAAAD;AAAA,AAAA,GAAA,CAAA,AAAAiZ,6BAAA,AAAAhZ;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAA4Y,2BAAA,AAAAhZ;;;AAAA,IAAAiZ,YAAA,CAAA,AAAAD,yBAAA;0BAAA,EAAA,EAAAC,eAAA,AAAAtb,cAAA,AAAAqb,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,zLAAaG,mHAAS,gDAAA,hDAAC9Z;IAAvB6Z,WAAA,AACE,kBAAA,AAAArd,sCAAA,mFAAA,yNAAA,mFAAA,8FAAA,2CAAA,wDAAA,cAAA,6DAAA,jqBAAKsd;AAAL,AAIgB,OAAC1b,mDAAM0b,oBAASxb;WAJhC,4BAAA,mFAAA,iDAAA,mFAAA,qOAAA,mFAAA,8FAAA,2CAAA,wDAAA,cAAA,6DAAA;AAAA,AAmBiB,OAACF,mDAAM0b,oBAASxb;WAnBjC,4BAAA,mFAAA,uGAAA,2CAAA,uDAAA,2CAAA,gEAAA,oBAAA,mFA+BKgb,qCAAYI;AAhCnB,AAAAG;;AAmCF,mCAAA,2CAAAE,9EAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA7c,4BAAA6c;UAAAA,NAAoBE;cAApB,AAAA9c,4CAAA4c,eAAA,rEAA+BlT;AAA/B,AACE,GAAI,OAASoT;AACXA;;AACA,QAAA,sDAAepT,SAAQ,iBAAAoN,qBAAgB,AAAChQ,cAAI,mDAAA,nDAAC8U,+CAAOkB;AAA7B,AAAA,GAAAhG;AAAA,AAAA,WAAAA,PAAWjR;AAAX,AACE,QAAA,IAAS,AAACD,wCAAYC;;AADxB","names":["this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","nextjournal.clerk.render/WrappedState","nextjournal.clerk.render/->WrappedState","st","coll","i","nf","or__4253__auto__","this","new-value","G__81925","fexpr__81924","cljs.core/constantly","f","fexpr__81927","a","G__81929","p1__81904#","fexpr__81928","b","G__81934","p1__81905#","fexpr__81933","xs","G__81945","p1__81906#","fexpr__81944","cljs.core.apply","nextjournal.clerk.render/as-array","x","G__81949","cljs.core/array?","cljs.core/to-array","var_args","G__81963","nextjournal.clerk.render/use-memo","js/Error","js/module$node_modules$react$index.useMemo","deps","G__81965","nextjournal.clerk.render/use-callback","nextjournal.clerk.render.use_callback","js/module$node_modules$react$index.useCallback","nextjournal.clerk.render/wrap-effect","v","cljs.core/fn?","js/undefined","G__81978","nextjournal.clerk.render/use-effect","js/module$node_modules$react$index.useEffect","nextjournal.clerk.render/use-state","init","js/module$node_modules$react$index.useState","nextjournal.clerk.render/specify-atom!","ref-obj","x81993","cljs.core/PROTOCOL_SENTINEL","o","cljs.core/reset!","G__82010","nextjournal.clerk.render/use-ref","nextjournal.clerk.render.use_ref","js/module$node_modules$react$index.useRef","nextjournal.clerk.render/use-sync-external-store","subscribe","get-snapshot","js/module$node_modules$use_sync_external_store$shim$index.useSyncExternalStore","nextjournal.clerk.render/use-watch","id","changed!","cljs.core/add-watch","_","cljs.core/remove-watch","*ratom-context*-orig-val__82017","*ratom-context*-temp-val__82018","cljs.core/deref","reagent.ratom/*ratom-context*","reagent.core/set-default-compiler!","reagent.core/create-compiler","nextjournal.clerk.render/nbsp","goog.string/unescapeEntities","nextjournal.clerk.render/toc-items","items","cljs.core.reduce","p__82023","map__82024","cljs.core/--destructure-map","cljs.core.get","acc","item","content","children","title","nextjournal.markdown.transform/->text","nextjournal.clerk.viewer/->slug","cljs.core.conj","cljs.core/vec","G__82025","nextjournal.clerk.render/dark-mode-toggle","!state","map__82026","dark-mode?","spring","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/not","nextjournal.ui.components.motion/svg","nextjournal.ui.components.motion/path","nextjournal.ui.components.motion/circle","nextjournal.ui.components.motion/g","nextjournal.clerk.render/localstorage-set!","key","val","js/window","nextjournal.clerk.render/localstorage-get","cljs.reader.read_string","nextjournal.clerk.render/local-storage-dark-mode-key","nextjournal.clerk.render/set-dark-mode!","class-list","js/document.querySelector","nextjournal.clerk.render/setup-dark-mode!","map__82039","p__82040","map__82041","old","cljs.core.not_EQ_","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.render","js/nextjournal.clerk.render.!eval-counter","nextjournal.clerk.render/!eval-counter","reagent.core.atom","p__82051","map__82052","nextjournal.clerk.render/render-notebook","_doc","bundle?","toc","toc-visibility","with-let82053","reagent.ratom/with-let-values","temp__5757__auto__","c__70033__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init82054","p1__82048#","p1__82049#","res82055","local-storage-key","temp__5755__auto__","stored-open?","root-ref-fn","ref-fn","map__82057","md-toc","cljs.core._EQ_","and__4251__auto__","nextjournal.ui.components.navbar/toggle-button","nextjournal.ui.components.icon/menu","nextjournal.ui.components.navbar/panel","nextjournal.ui.components.navbar/navbar","cljs.core.doall","cljs.core.map_indexed","idx","map__82059","viewer-name","nextjournal.clerk.viewer/->viewer","inner-viewer-name","G__82063","nextjournal.clerk.viewer/->value","cljs.core/name","G__82065","cljs.core/Keyword","nextjournal.clerk.viewer/width","G__82066","nextjournal.clerk.render/inspect-presented","nextjournal.clerk.render/opts->query","opts","p1__82071#","cljs.core.map","cljs.core.update","cljs.core.partial","clojure.string/join","clojure.string.join","nextjournal.clerk.render/render-unreadable-edn","edn","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","nextjournal.clerk.render/error-badge","seq82075","self__4852__auto__","cljs.core/seq","cljs.core.into","nextjournal.clerk.render/error-view","error","e82088","clojure.string/split-lines","cljs.core.drop","cljs.core.mapv","clojure.string/trim","data","nextjournal.clerk.render/inspect","nextjournal.clerk.render/ErrorProvider","obj82089","nextjournal.view.context/get-context","G__82091","obj82092","nextjournal.clerk.render/ErrorBoundary","js/module$node_modules$react$index.Component","props","!error","self__","new-val","obj__67313__auto__","f__67314__auto__","map__82093","cljs.core/hash-map","map__82094","obj82097","obj82099","map__82095","obj82100","obj82102","reagent.core.as_element","js/module$node_modules$react$index.createElement","obj82103","nextjournal.clerk.render/default-loading-view","nextjournal.clerk.render/use-handle-error","js/module$node_modules$react$index.useContext","nextjournal.clerk.render/read-string","s","js/nextjournal.clerk.sci_env.read-string","p__82106","map__82107","nextjournal.clerk.render/fetch!","blob-id","js/fetch","p1__82104#","p1__82105#","e82108","e","js/console.error","p__82109","map__82110","nextjournal.clerk.render/read-result","string","e82111","p__82113","map__82114","nextjournal.clerk.render/render-result","result","fetch-opts","hash","_opts","with-let82115","init82116","p1__82112#","res82117","!hash","cljs.core.atom","!desc","!fetch-opts","fetch-fn","more","nextjournal.clerk.viewer/merge-presentations","!expanded-at","on-key-down","event","cljs.core/dissoc","on-key-up","js/document","js/document.addEventListener","js/document.removeEventListener","nextjournal.view.context/provide","nextjournal.clerk.render/toggle-expanded","path","map__82121","hover-path","prompt-multi-expand?","hover-path-count","cljs.core/count","hover-path-expanded?","expanded-at","p__82122","vec__82123","cljs.core.nth","expanded?","cljs.core/coll?","cljs.core/vector?","cljs.core.assoc","cljs.core/update","nextjournal.clerk.render/expandable?","nextjournal.clerk.render/inspect-children","G__82126","G__82127","cljs.core.fnil","cljs.core/conj","nextjournal.clerk.render/expand-style","nextjournal.clerk.render/triangle","nextjournal.clerk.render/triangle-spacer","nextjournal.clerk.render/expand-button","opening-paren","map__82128","multi-expand?","p__82135","map__82136","nextjournal.clerk.render/render-coll","viewer","map__82137","closing-paren","cljs.core.comp","cljs.core.interpose","G__82139","cljs.core/list?","p__82140","map__82141","nextjournal.clerk.render/render-elision","total","offset","unbounded?","nextjournal.view.context/consume","p__82142","map__82143","nextjournal.clerk.render/render-map","map__82144","G__82146","p__82148","map__82149","nextjournal.clerk.render/render-string","p1__82147#","p__82156","map__82157","nextjournal.clerk.render/render-quoted-string","map__82162","p1__82155#","cljs.core/some","clojure.string/includes?","nextjournal.clerk.render/render-number","num","js/Number.isNaN","nextjournal.clerk.render/sort!","!sort","k","map__82165","sort-key","sort-order","p__82172","p__82173","map__82177","map__82178","nextjournal.clerk.render/sort-data","sort-index","head","rows","G__82179","p1__82166#","cljs.core.sort_by","G__82180","cljs.core/val","clojure.string/lower-case","p1__82167#","p2__82168#","p1__82170#","p2__82169#","cljs.core/compare","nextjournal.clerk.render/x-icon","nextjournal.clerk.render/check-icon","p__82184","vec__82185","nextjournal.clerk.render/render-table-error","p__82188","map__82189","nextjournal.clerk.render/throwable-view","via","trace","p__82190","map__82191","_ex","type","message","_trace","p__82193","vec__82194","call","_x","file","line","nextjournal.clerk.render/render-throwable","ex","G__82204","nextjournal.clerk.render/render-tagged-value","p__82208","map__82209","tag","value","nextjournal.clerk.render.render_tagged_value","space?","js/nextjournal.clerk.render.!doc","nextjournal.clerk.render/!doc","reagent.ratom.atom","js/nextjournal.clerk.render.!error","nextjournal.clerk.render/!error","js/nextjournal.clerk.render.!viewers","nextjournal.clerk.render/!viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.render/set-viewers!","scope","viewers","nextjournal.clerk.render/valid-react-element?","js/module$node_modules$react$index.isValidElement","G__82217","with-let82222","init82223","res82224","map__82227","cljs.core/peek","cljs.core.merge","nextjournal.clerk.render/in-process-fetch","js/Promise","nextjournal.clerk.viewer.present","with-let82232","init82233","res82234","nextjournal.clerk.render/root","p__82235","vec__82236","nextjournal.clerk.render/intern-atom!","sci-ctx","var-name","state","temp__5751__auto__","existing-var","sci.core/resolve","sci.core.intern","sci.core.create_ns","cljs.core.symbol","cljs.core/namespace","cljs.core/with-meta","p__82241","map__82242","nextjournal.clerk.render/set-state","doc","remount?","seq__82243","chunk__82244","count__82245","i__82246","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","atom-var","cljs.core.get_in","cljs.core/inc","cljs.core/contains?","nextjournal.clerk.render/swap-fn!","seq82253","G__82254","self__4851__auto__","atom","swap-args","cljs.core/swap!","cljs.core/meta","js/ws_send","cljs.core.pr_str","nextjournal.clerk.viewer/->viewer-eval","cljs.core/List","js/console.warn","p__82258","map__82259","nextjournal.clerk.render/swap-clerk-atom!","var","args","p__82262","map__82263","nextjournal.clerk.render/dispatch","msg","dispatch-fn","G__82265","G__82266","fexpr__82264","js/nextjournal.clerk.render.react-root","nextjournal.clerk.render/react-root","el","js/document.getElementById","js/module$node_modules$react_dom$client.createRoot","nextjournal.clerk.render/mount","nextjournal.clerk.render/clerk-eval","form","goog/global","p__82272","map__82273","nextjournal.clerk.render/render-katex","tex-string","inline?","nextjournal.viewer.katex.to_html_string","nextjournal.clerk.render/html-render","markup","nextjournal.clerk.render/html-viewer","nextjournal.clerk.render/html","nextjournal.clerk.viewer/with-viewer","nextjournal.clerk.render/render-reagent","G__82286","cljs.core/PersistentVector","nextjournal.clerk.render/reagent-viewer","nextjournal.clerk.render/use-promise","p","handle-error","nextjournal.clerk.render.use_effect","p1__82288#","nextjournal.clerk.render/use-d3-require","package","js/module$node_modules$d3_require$dist$d3_require.require","G__82293","p__82294","map__82295","nextjournal.clerk.render/with-d3-require","loading-view","nextjournal.clerk.render/render-vega-lite","vega-embed","p1__82296#","cljs.core/clj->js","cljs.core.dissoc","nextjournal.clerk.render/render-plotly","plotly","p1__82297#","nextjournal.clerk.render/render-mathjax","nextjournal.viewer.mathjax/viewer","nextjournal.clerk.render/render-code","nextjournal.viewer.code/viewer","nextjournal.clerk.render/expand-icon","nextjournal.clerk.render/render-folded-code","code-string","with-let82299","init82300","res82301","!hidden?","p__82308","map__82309","nextjournal.clerk.render/url-for","src"],"sourcesContent":["(ns nextjournal.clerk.render\n  (:require [\"d3-require\" :as d3-require]\n            [\"react\" :as react]\n            [\"react-dom/client\" :as react-client]\n            [\"use-sync-external-store/shim\" :refer [useSyncExternalStore]]\n            [applied-science.js-interop :as j]\n            [cljs.reader]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string :as gstring]\n            [nextjournal.clerk.viewer :as viewer]\n            [nextjournal.markdown.transform :as md.transform]\n            [nextjournal.ui.components.icon :as icon]\n            [nextjournal.ui.components.motion :as motion]\n            [nextjournal.ui.components.navbar :as navbar]\n            [nextjournal.view.context :as view-context]\n            [nextjournal.viewer.code :as code]\n            [nextjournal.viewer.katex :as katex]\n            [nextjournal.viewer.mathjax :as mathjax]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [reagent.ratom :as ratom]\n            [shadow.cljs.modern :refer [defclass]]\n            [sci.core :as sci]))\n\n;; a type for wrapping react/useState to support reset! and swap!\n(deftype WrappedState [st]\n  IIndexed\n  (-nth [coll i] (aget st i))\n  (-nth [coll i nf] (or (aget st i) nf))\n  IDeref\n  (-deref [^js this] (aget st 0))\n  IReset\n  (-reset! [^js this new-value]\n   ;; `constantly` here ensures that if we reset state to a fn,\n   ;; it is stored as-is and not applied to prev value.\n    ((aget st 1) (constantly new-value)))\n  ISwap\n  (-swap! [this f] ((aget st 1) f))\n  (-swap! [this f a] ((aget st 1) #(f % a)))\n  (-swap! [this f a b] ((aget st 1) #(f % a b)))\n  (-swap! [this f a b xs] ((aget st 1) #(apply f % a b xs))))\n\n(defn- as-array [x] (cond-> x (not (array? x)) to-array))\n\n(defn use-memo\n  \"React hook: useMemo. Defaults to an empty `deps` array.\"\n  ([f] (react/useMemo f #js[]))\n  ([f deps] (react/useMemo f (as-array deps))))\n\n(defn use-callback\n  \"React hook: useCallback. Defaults to an empty `deps` array.\"\n  ([x] (use-callback x #js[]))\n  ([x deps] (react/useCallback x (to-array deps))))\n\n(defn- wrap-effect\n  ;; utility for wrapping function to return `js/undefined` for non-functions\n  [f] #(let [v (f)] (if (fn? v) v js/undefined)))\n\n(defn use-effect\n  \"React hook: useEffect. Defaults to an empty `deps` array.\n   Wraps `f` to return js/undefined for any non-function value.\"\n  ([f] (react/useEffect (wrap-effect f) #js[]))\n  ([f deps] (react/useEffect (wrap-effect f) (as-array deps))))\n\n(defn use-state\n  \"React hook: useState. Can be used like react/useState but also behaves like an atom.\"\n  [init]\n  (WrappedState. (react/useState init)))\n\n(defn- specify-atom! [ref-obj]\n  (specify! ref-obj\n    IDeref\n    (-deref [^js this] (.-current this))\n    IReset\n    (-reset! [^js this new-value] (set! (.-current this) new-value))\n    ISwap\n    (-swap!\n      ([o f] (reset! o (f o)))\n      ([o f a] (reset! o (f o a)))\n      ([o f a b] (reset! o (f o a b)))\n      ([o f a b xs] (reset! o (apply f o a b xs))))))\n\n(defn use-ref\n  \"React hook: useRef. Can also be used like an atom.\"\n  ([] (use-ref nil))\n  ([init] (specify-atom! (react/useRef init))))\n\n(defn use-sync-external-store [subscribe get-snapshot]\n  (useSyncExternalStore subscribe get-snapshot))\n\n(defn use-watch\n  \"Hook for reading value of an IWatchable. Compatible with reading Reagent reactions non-reactively.\"\n  [x]\n  (let [id (use-callback #js{})]\n    (use-sync-external-store\n     (use-callback\n      (fn [changed!]\n        (add-watch x id (fn [_ _ _ _] (changed!)))\n        #(remove-watch x id))\n      #js[x])\n     #(binding [reagent.ratom/*ratom-context* nil] @x))))\n\n(r/set-default-compiler! (r/create-compiler {:function-components true}))\n\n(declare inspect inspect-presented reagent-viewer html html-viewer)\n\n(def nbsp (gstring/unescapeEntities \"&nbsp;\"))\n\n(defn toc-items [items]\n  (reduce\n   (fn [acc {:as item :keys [content children]}]\n     (if content\n       (let [title (md.transform/->text item)]\n         (->> {:title title\n               :path (str \"#\" (viewer/->slug title))\n               :items (toc-items children)}\n              (conj acc)\n              vec))\n       (toc-items (:children item))))\n   []\n   items))\n\n(defn dark-mode-toggle [!state]\n  (let [{:keys [dark-mode?]} @!state\n        spring {:type :spring :stiffness 200 :damping 10}]\n    [:div.relative.dark-mode-toggle\n     [:button.text-slate-400.hover:text-slate-600.dark:hover:text-white.cursor-pointer\n      {:on-click #(swap! !state assoc :dark-mode? (not dark-mode?))}\n      (if dark-mode?\n        [:> motion/svg\n         {:xmlns \"http://www.w3.org/2000/svg\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 50 50\"\n          :key \"moon\"}\n         [:> motion/path\n          {:d \"M 43.81 29.354 C 43.688 28.958 43.413 28.626 43.046 28.432 C 42.679 28.238 42.251 28.198 41.854 28.321 C 36.161 29.886 30.067 28.272 25.894 24.096 C 21.722 19.92 20.113 13.824 21.683 8.133 C 21.848 7.582 21.697 6.985 21.29 6.578 C 20.884 6.172 20.287 6.022 19.736 6.187 C 10.659 8.728 4.691 17.389 5.55 26.776 C 6.408 36.163 13.847 43.598 23.235 44.451 C 32.622 45.304 41.28 39.332 43.816 30.253 C 43.902 29.96 43.9 29.647 43.81 29.354 Z\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 0.6 :rotate 90}\n                      :animate {:scale 1 :rotate 0 :transition spring}}}]]\n        [:> motion/svg\n         {:key \"sun\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 24 24\"\n          :fill \"none\"\n          :xmlns \"http://www.w3.org/2000/svg\"}\n         [:> motion/circle\n          {:cx \"11.9998\"\n           :cy \"11.9998\"\n           :r \"5.75375\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 1.5}\n                      :animate {:scale 1 :transition spring}}}]\n         [:> motion/g\n          {:initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:rotate 45}\n                      :animate {:rotate 0 :transition spring}}}\n          [:circle {:cx \"3.08982\" :cy \"6.85502\" :r \"1.71143\" :transform \"rotate(-60 3.08982 6.85502)\" :fill \"currentColor\"}]\n          [:circle {:cx \"3.0903\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-120 3.0903 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"22.2881\" :r \"1.71143\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-60 20.9101 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"6.8555\" :r \"1.71143\" :transform \"rotate(-120 20.9101 6.8555)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"1.71143\" :r \"1.71143\" :fill \"currentColor\"}]]])]]))\n\n\n(defn localstorage-set! [key val]\n  (when (exists? js/window)\n    (.setItem (.-localStorage js/window) key val)))\n\n(defn localstorage-get [key]\n  (when (exists? js/window)\n    (cljs.reader/read-string (.getItem (.-localStorage js/window) key))))\n\n\n(def local-storage-dark-mode-key \"clerk-darkmode\")\n\n(defn set-dark-mode! [dark-mode?]\n  (let [class-list (.-classList (js/document.querySelector \"html\"))]\n    (if dark-mode?\n      (.add class-list \"dark\")\n      (.remove class-list \"dark\")))\n  (localstorage-set! local-storage-dark-mode-key dark-mode?))\n\n(defn setup-dark-mode! [!state]\n  (let [{:keys [dark-mode?]} @!state]\n    (add-watch !state ::dark-mode\n               (fn [_ _ old {:keys [dark-mode?]}]\n                 (when (not= (:dark-mode? old) dark-mode?)\n                   (set-dark-mode! dark-mode?))))\n    (when dark-mode?\n      (set-dark-mode! dark-mode?))))\n\n(defonce !eval-counter (r/atom 0))\n\n(defn render-notebook [{:as _doc xs :blocks :keys [bundle? toc toc-visibility]}]\n  (r/with-let [local-storage-key \"clerk-navbar\"\n               !state (r/atom {:toc (toc-items (:children toc))\n                               :md-toc toc\n                               :dark-mode? (localstorage-get local-storage-dark-mode-key)\n                               :theme {:slide-over \"bg-slate-100 dark:bg-gray-800 font-sans border-r dark:border-slate-900\"}\n                               :width 220\n                               :mobile-width 300\n                               :local-storage-key local-storage-key\n                               :set-hash? (not bundle?)\n                               :open? (if-some [stored-open? (localstorage-get local-storage-key)]\n                                        stored-open?\n                                        (not= :collapsed toc-visibility))})\n               root-ref-fn #(when % (setup-dark-mode! !state))\n               ref-fn #(when % (swap! !state assoc :scroll-el %))]\n    (let [{:keys [md-toc]} @!state]\n      (when-not (= md-toc toc)\n        (swap! !state assoc :toc (toc-items (:children toc)) :md-toc toc :open? (not= :collapsed toc-visibility)))\n      [:div.flex\n       {:ref root-ref-fn}\n       [:div.fixed.top-2.left-2.md:left-auto.md:right-2.z-10\n        [dark-mode-toggle !state]]\n       (when (and toc toc-visibility)\n         [:<>\n          [navbar/toggle-button !state\n           [:<>\n            [icon/menu {:size 20}]\n            [:span.uppercase.tracking-wider.ml-1.font-bold\n             {:class \"text-[12px]\"} \"ToC\"]]\n           {:class \"z-10 fixed right-2 top-2 md:right-auto md:left-3 md:top-3 text-slate-400 font-sans text-xs hover:underline cursor-pointer flex items-center bg-white dark:bg-gray-900 py-1 px-3 md:p-0 rounded-full md:rounded-none border md:border-0 border-slate-200 dark:border-gray-500 shadow md:shadow-none dark:text-slate-400 dark:hover:text-white\"}]\n          [navbar/panel !state [navbar/navbar !state]]])\n       [:div.flex-auto.h-screen.overflow-y-auto.scroll-container\n        {:ref ref-fn}\n        [:div.flex.flex-col.items-center.viewer-notebook.flex-auto\n         (doall\n          (map-indexed (fn [idx x]\n                         (let [{viewer-name :name} (viewer/->viewer x)\n                               inner-viewer-name (some-> x viewer/->value viewer/->viewer :name)]\n                           ^{:key (str idx \"-\" @!eval-counter)}\n                           [:div {:class [\"viewer\"\n                                          (when (:nextjournal/open-graph-image-capture (viewer/->value x)) \"open-graph-image-capture\")\n                                          (when viewer-name (str \"viewer-\" (name viewer-name)))\n                                          (when inner-viewer-name (str \"viewer-\" (name inner-viewer-name)))\n                                          (case (or (viewer/width x) (case viewer-name (:code :code-folded) :wide :prose))\n                                            :wide \"w-full max-w-wide\"\n                                            :full \"w-full\"\n                                            \"w-full max-w-prose px-8\")]}\n                            [inspect-presented x]]))\n                       xs))]]])))\n\n(defn opts->query [opts]\n  (->> opts\n       (map #(update % 0 name))\n       (map (partial str/join \"=\"))\n       (str/join \"&\")))\n\n\n#_(opts->query {:s 12 :num 42})\n\n\n\n(defn render-unreadable-edn [edn]\n  [:span.inspected-value.whitespace-nowrap.cmt-default edn])\n\n(defn error-badge [& content]\n  [:div.bg-red-50.rounded-sm.text-xs.text-red-400.px-2.py-1.items-center.sans-serif.inline-flex\n   [:svg.h-4.w-4.text-red-400 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :aria-hidden \"true\"}\n    [:path {:fill-rule \"evenodd\" :d \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" :clip-rule \"evenodd\"}]]\n   (into [:div.ml-2.font-bold] content)])\n\n(defn error-view [error]\n  [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-300.not-prose\n   [:p.font-mono.text-red-600.dark:text-red-300.font-bold (.-message error)]\n   [:pre.text-red-600.dark:text-red-300.w-full.overflow-auto.mt-2\n    {:class \"text-[11px] max-h-[155px]\"}\n    (try\n      (->> (.-stack error)\n           str/split-lines\n           (drop 1)\n           (mapv str/trim)\n           (str/join \"\\n\"))\n      (catch js/Error _ nil))]\n   (when-some [data (.-data error)]\n     [:div.mt-2 [inspect data]])])\n\n(def ErrorProvider (j/get (view-context/get-context :!error) :Provider))\n\n(defclass ErrorBoundary\n  (extends react/Component)\n  (field !error)\n  (constructor [this ^js props]\n\n               (super props)\n               (set! !error (j/get props :!error))\n               (set! (.-state this) #js{:error @!error}))\n  Object\n  (componentDidMount [this]\n                     (add-watch !error this\n                                (fn [_ _ _ new-val]\n                                  (j/call this :setState #js{:error new-val}))))\n  (componentWillUnmount [this] (remove-watch !error this))\n  (render [^js this props]\n          (j/let [^js {{:keys [error]} :state\n                       {:keys [children]} :props} this]\n            (if error\n              (r/as-element [error-view error])\n              (.apply react/createElement nil\n                      (.concat #js[ErrorProvider #js{:value !error}] children))))))\n\n(j/!set ErrorBoundary\n        :getDerivedStateFromError (fn [error] #js{:error error}))\n\n(def default-loading-view \"Loading...\")\n\n(defn use-handle-error []\n  (partial reset! (react/useContext (view-context/get-context :!error))))\n\n;; TODO: drop this\n(defn read-string [s]\n  (js/nextjournal.clerk.sci_env.read-string s))\n\n\n(defn fetch! [{:keys [blob-id]} opts]\n  #_(js/console.log :fetch! blob-id opts)\n  (-> (js/fetch (str \"_blob/\" blob-id (when (seq opts)\n                                        (str \"?\" (opts->query opts)))))\n      (.then #(.text %))\n      (.then #(try (read-string %)\n                   (catch js/Error e\n                     (js/console.error #js {:message \"sci read error\" :blob-id blob-id :code-string % :error e })\n                     (render-unreadable-edn %))))))\n\n(defn read-result [{:nextjournal/keys [edn string]} !error]\n  (if edn\n    (try\n      (read-string edn)\n      (catch js/Error e\n        (reset! !error e)))\n    (render-unreadable-edn string)))\n\n(defn render-result [{:as result :nextjournal/keys [fetch-opts hash]} _opts]\n  (r/with-let [!hash (atom hash)\n               !error (r/atom nil)\n               !desc (r/atom (read-result result !error))\n               !fetch-opts (atom fetch-opts)\n               fetch-fn (when @!fetch-opts\n                          (fn [opts]\n                            (.then (fetch! @!fetch-opts opts)\n                                   (fn [more]\n                                     (swap! !desc viewer/merge-presentations more opts)))))\n               !expanded-at (r/atom (get @!desc :nextjournal/expanded-at {}))\n               on-key-down (fn [event]\n                             (if (.-altKey event)\n                               (swap! !expanded-at assoc :prompt-multi-expand? true)\n                               (swap! !expanded-at dissoc :prompt-multi-expand?)))\n               on-key-up #(swap! !expanded-at dissoc :prompt-multi-expand?)\n               ref-fn #(if %\n                         (when (exists? js/document)\n                           (js/document.addEventListener \"keydown\" on-key-down)\n                           (js/document.addEventListener \"keyup\" on-key-up))\n                         (when (exists? js/document)\n                           (js/document.removeEventListener \"keydown\" on-key-down)\n                           (js/document.removeEventListener \"up\" on-key-up)))]\n    (when-not (= hash @!hash)\n      ;; TODO: simplify\n      (reset! !hash hash)\n      (reset! !fetch-opts fetch-opts)\n      (reset! !desc (read-result result !error))\n      (reset! !error nil))\n    [view-context/provide {:fetch-fn fetch-fn}\n     [:> ErrorBoundary {:!error !error}\n      [:div.relative\n       [:div.overflow-y-hidden\n        {:ref ref-fn}\n        [inspect-presented {:!expanded-at !expanded-at} @!desc]]]]]))\n\n(defn toggle-expanded [!expanded-at path event]\n  (.preventDefault event)\n  (.stopPropagation event)\n  (let [{:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        hover-path-count (count hover-path)\n        hover-path-expanded? (get @!expanded-at path)]\n    (if (and hover-path prompt-multi-expand? (= (count path) hover-path-count))\n      (swap! !expanded-at (fn [expanded-at]\n                            (reduce\n                             (fn [acc [path expanded?]]\n                               (if (and (coll? path) (vector? path) (= (count path) hover-path-count))\n                                 (assoc acc path (not hover-path-expanded?))\n                                 (assoc acc path expanded?)))\n                             {}\n                             expanded-at)))\n      (swap! !expanded-at update path not))))\n\n\n(defn expandable? [xs]\n  (< 1 (count xs)))\n\n\n(defn inspect-children [opts]\n  ;; TODO: move update function onto viewer\n  (map-indexed (fn [idx x]\n                 (inspect-presented (update opts :path (fnil conj []) idx) x))))\n\n(def expand-style\n  [\"cursor-pointer\"\n   \"bg-indigo-50\"\n   \"hover:bg-indigo-100\"\n   \"border-b\"\n   \"border-gray-400\"\n   \"hover:border-gray-500\"\n   \"dark:bg-gray-900\"\n   \"dark:hover:bg-slate-700\"\n   \"dark:border-slate-600\"\n   \"dark:hover:border-slate-500\"])\n\n(defn triangle [expanded?]\n  [:svg {:viewBox \"0 0 100 100\"\n         :class (str \"w-[7px] h-[7px] fill-current inline-block transition-all mr-[1px] -mt-[2px] \"\n                     (if expanded? \"rotate-180\" \"rotate-90\"))}\n   [:polygon {:points \"5.9,88.2 50,11.8 94.1,88.2 \"}]])\n\n(def triangle-spacer [:span {:class \"inline-block w-[8px]\"}])\n\n(defn expand-button [!expanded-at opening-paren path]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        multi-expand? (and hover-path prompt-multi-expand? (= (count path) (count hover-path)))]\n    [:span.group.hover:bg-indigo-100.rounded-sm.hover:shadow.cursor-pointer\n     {:class (when multi-expand? \"bg-indigo-100 shadow \")\n      :on-click (partial toggle-expanded !expanded-at path)\n      :on-mouse-enter #(swap! !expanded-at assoc :hover-path path)\n      :on-mouse-leave #(swap! !expanded-at dissoc :hover-path)}\n     [:span.text-slate-400.group-hover:text-indigo-700\n      {:class (when multi-expand? \"text-indigo-700 \")}\n      [triangle expanded?]]\n     [:span.group-hover:text-indigo-700 opening-paren]]))\n\n(defn render-coll [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [opening-paren closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (< 1 (count xs))\n        [expand-button !expanded-at opening-paren path]\n        [:span opening-paren])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp (when (= 2 (count opening-paren)) nbsp)] \" \")))\n            xs)\n      [:span\n       (cond->> closing-paren (list? closing-paren) (into [:<>]))]]]))\n\n(defn render-elision [{:as fetch-opts :keys [total offset unbounded?]} _]\n  [view-context/consume :fetch-fn\n   (fn [fetch-fn]\n     [:span.sans-serif.relative.whitespace-nowrap\n      {:style {:border-radius 2 :padding (when (fn? fetch-fn) \"1px 3px\") :font-size 11 :top -1}\n       :class (if (fn? fetch-fn)\n                \"cursor-pointer bg-indigo-200 hover:bg-indigo-300 dark:bg-gray-700 dark:hover:bg-slate-600 text-gray-900 dark:text-white\"\n                \"text-gray-400 dark:text-slate-300\")\n       :on-click #(when (fn? fetch-fn)\n                    (fetch-fn fetch-opts))} (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")])])\n\n(defn render-map [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (expandable? xs)\n        [expand-button !expanded-at \"{\" path]\n        [:span \"{\"])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp #_(repeat (inc (count path)) nbsp)] \" \")))\n            xs)\n      (cond->> closing-paren (list? closing-paren) (into [:<>]))]]))\n\n\n(defn render-string [s {:as opts :keys [path !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)]\n    (into [:span]\n          (map #(if (string? %)\n                  (if expanded?\n                    (into [:<>] (interpose [:<> [:br]] (str/split-lines %)))\n                    (into [:<>] (interpose [:span.text-slate-400 \"\u21a9\ufe0e\"] (str/split-lines %))))\n                  (inspect-presented opts %)))\n          (if (string? s) [s] s))))\n\n(defn render-quoted-string [s {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [{:keys [closing-paren]} viewer]\n    [:span.cmt-string.inspected-value.whitespace-nowrap.inline-flex\n     [:span\n      (if (some #(and (string? %) (str/includes? % \"\\n\")) (if (string? s) [s] s))\n        [expand-button !expanded-at \"\\\"\" path]\n        [:span \"\\\"\"])]\n     [:div\n      (viewer/->value (render-string s opts))\n      \"\\\"\"\n      closing-paren]]))\n\n(defn render-number [num]\n  [:span.cmt-number.inspected-value\n   (if (js/Number.isNaN num) \"NaN\" (str num))])\n\n(defn sort! [!sort i k]\n  (let [{:keys [sort-key sort-order]} @!sort]\n    (reset! !sort {:sort-index i\n                   :sort-key k\n                   :sort-order (if (= sort-key k) (if (= sort-order :asc) :desc :asc) :asc)})))\n\n(defn sort-data [{:keys [sort-index sort-order]} {:as data :keys [head rows]}]\n  (cond-> data\n    head (assoc :rows (->> rows\n                           (sort-by #(cond-> (get % sort-index)\n                                       (string? val) str/lower-case)\n                                    (if (= sort-order :asc) #(compare %1 %2) #(compare %2 %1)))\n                           vec))))\n\n(def x-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(def check-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" :clip-rule \"evenodd\"}]])\n\n(defn render-table-error [[data]]\n  ;; currently boxing the value in a vector to retain the type info\n  ;; TODO: find a better way to do this\n  [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-400.not-prose\n   [:h4.mt-0.uppercase.text-xs.dark:text-red-400.tracking-wide \"Table Error\"]\n   [:p.mt-4.font-medium \"Clerk\u2019s table viewer does not recognize the format of your data:\"]\n   [:div.mt-2.flex\n    [:div.text-red-500.mr-2 x-icon]\n    [inspect-presented data]]\n   [:p.mt-4.font-medium \"Currently, the following formats are supported:\"]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect {:column-1 [1 2]\n              :column-2 [3 4]}]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect [{:column-1 1 :column-2 3} {:column-1 2 :column-2 4}]]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect [[1 3] [2 4]]]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect {:head [:column-1 :column-2]\n              :rows [[1 3] [2 4]]}]]])\n\n\n(defn throwable-view [{:keys [via trace]}]\n  [:div.bg-white.max-w-6xl.mx-auto.text-xs.monospace.not-prose\n   (into\n    [:div]\n    (map\n     (fn [{:as _ex :keys [type message data _trace]}]\n       [:div.p-4.bg-red-100.border-b.border-b-gray-300\n        [:div.font-bold \"Unhandled \" type]\n        [:div.font-bold.mt-1 message]\n        [:div.mt-1 [inspect data]]])\n     via))\n   [:div.py-6.overflow-x-auto\n    [:table.w-full\n     (into [:tbody]\n           (map (fn [[call _x file line]]\n                  [:tr.hover:bg-red-100.leading-tight\n                   [:td.text-right.px-6 file \":\"]\n                   [:td.text-right.pr-6 line]\n                   [:td.py-1.pr-6 call]]))\n           trace)]]])\n\n(defn render-throwable [ex]\n  [throwable-view ex])\n\n(defn render-tagged-value\n  ([tag value] (render-tagged-value {:space? true} tag value))\n  ([{:keys [space?]} tag value]\n   [:span.inspected-value.whitespace-nowrap\n    [:span.cmt-meta tag] (when space? nbsp) value]))\n\n(defonce !doc (ratom/atom nil))\n(defonce !error (ratom/atom nil))\n(defonce !viewers viewer/!viewers)\n\n(defn set-viewers! [scope viewers]\n  #_(js/console.log :set-viewers! {:scope scope :viewers viewers})\n  (swap! !viewers assoc scope (vec viewers))\n  'set-viewers!)\n\n(declare default-viewers)\n\n(defn valid-react-element? [x] (react/isValidElement x))\n(defn inspect-presented\n  ([x]\n   (r/with-let [!expanded-at (r/atom (:nextjournal/expanded-at x))]\n     [inspect-presented {:!expanded-at !expanded-at} x]))\n  ([opts x]\n   (if (valid-react-element? x)\n     x\n     (let [{:nextjournal/keys [value viewer]} x]\n       #_(prn :inspect-presented value :valid-element? (react/isValidElement value) :viewer viewer)\n       ;; each view function must be called in its own 'functional component' so that it gets its own hook state.\n       ^{:key (str (:hash viewer) \"@\" (peek (:path opts)))}\n       [(:render-fn viewer) value (merge opts (:nextjournal/opts x) {:viewer viewer})]))))\n\n(defn in-process-fetch [value opts]\n  (.resolve js/Promise (viewer/present value opts)))\n\n(defn inspect [value]\n  (r/with-let [!state (r/atom nil)]\n    (when (not= (:value @!state ::not-found) value)\n      (swap! !state assoc :value value :desc (viewer/present value)))\n    [view-context/provide {:fetch-fn (fn [fetch-opts]\n                                       (.then (in-process-fetch value fetch-opts)\n                                              (fn [more]\n                                                (swap! !state update :desc viewer/merge-presentations more fetch-opts))))}\n     [inspect-presented (:desc @!state)]]))\n\n(defn root []\n  [:<>\n   [inspect-presented @!doc]\n   (when @!error\n     [:div.fixed.top-0.left-0.w-full.h-full\n      [inspect-presented @!error]])])\n\n(declare mount)\n\n(defn intern-atom! [sci-ctx [var-name state]]\n  (assert sci-ctx \"sci-ctx must be set\")\n  (if-let [existing-var (sci/resolve sci-ctx var-name)]\n    (reset! @existing-var state)\n    (sci/intern sci-ctx\n                (sci/create-ns (symbol (namespace var-name)))\n                (symbol (name var-name))\n                (with-meta (r/atom state)\n                  {:var-name var-name}))))\n\n(defn ^:export set-state [{:as state :keys [doc error remount? sci-ctx]}]\n  (doseq [atom-var (get-in doc [:nextjournal/value :atom-var-name->state])]\n    (intern-atom! sci-ctx atom-var))\n  (when remount?\n    (swap! !eval-counter inc))\n  (when (contains? state :doc)\n    (reset! !doc doc))\n  (reset! !error error)\n  (when-let [title (and (exists? js/document) (-> doc viewer/->value :title))]\n    (set! (.-title js/document) title)))\n\n(defn swap-fn! [atom & swap-args]\n  (apply swap! atom swap-args)\n  (if-let [var-name (-> atom meta :var-name)]\n    ;; TODO: for now sending whole state but could also diff\n    (js/ws_send (pr-str {:type :swap! :var-name var-name :args (viewer/->viewer-eval [(list 'fn ['_] @atom)]) :var (viewer/->viewer-eval (list 'resolve (list 'quote var-name)))}))\n    (js/console.warn \"clerk/swap-fn! called on an atom that doesn't have var-name set!\")))\n\n(defn swap-clerk-atom! [{:as event :keys [var var-name args]}]\n  (apply swap! @var args))\n\n(defn ^:export dispatch [{:as msg :keys [type]}]\n  (let [dispatch-fn ({:set-state! set-state\n                      :swap! swap-clerk-atom!}\n                     type\n                     (fn [type]\n                       (js/console.warn (str \"no on-message dispatch for type `\" (pr-str type) \"`\"))))]\n    #_(prn :<= type := msg)\n    (dispatch-fn msg)))\n\n(defonce react-root\n  (when-let [el (and (exists? js/document) (js/document.getElementById \"clerk\"))]\n    (react-client/createRoot el)))\n\n(defn ^:export ^:dev/after-load mount []\n  (when react-root\n    (.render react-root (r/as-element [root]))))\n\n(defn clerk-eval [form]\n  (.ws_send ^js goog/global (pr-str {:type :eval :form form})))\n\n(defn render-katex [tex-string {:keys [inline?]}]\n  [:span {:dangerouslySetInnerHTML {:__html (katex/to-html-string tex-string (j/obj :displayMode (not inline?)))}}])\n\n(defn html-render [markup]\n  (r/as-element\n   (if (string? markup)\n     [:span {:dangerouslySetInnerHTML {:__html markup}}]\n     markup)))\n\n(def html-viewer\n  {:render-fn html-render})\n\n(def html\n  (partial viewer/with-viewer html-viewer))\n\n(defn render-reagent [x]\n  (r/as-element (cond-> x (fn? x) vector)))\n\n;; TODO: remove\n(def reagent-viewer render-reagent)\n\n(defn use-promise\n  \"React hook which resolves a promise and handles errors.\"\n  [p]\n  (let [handle-error (use-handle-error)\n        !state (use-state nil)]\n    (use-effect (fn []\n                  (-> p\n                      (.then #(reset! !state %))\n                      (.catch handle-error)))\n                #js [])\n    @!state))\n\n(defn ^js use-d3-require [package]\n  (let [p (react/useMemo #(apply d3-require/require\n                                 (cond-> package\n                                   (string? package)\n                                   list))\n                         #js[(str package)])]\n    (use-promise p)))\n\n(defn with-d3-require [{:keys [package loading-view]\n                        :or {loading-view default-loading-view}} f]\n  (if-let [package (use-d3-require package)]\n    (f package)\n    loading-view))\n\n(defn render-vega-lite [value]\n  (let [handle-error (use-handle-error)\n        vega-embed (use-d3-require \"vega-embed@6.11.1\")\n        ref-fn (react/useCallback #(when %\n                                     (-> (.embed vega-embed % (clj->js (dissoc value :embed/opts)) (clj->js (:embed/opts value {})))\n                                         (.catch handle-error)))\n                                  #js[value vega-embed])]\n    (when value\n      (if vega-embed\n        [:div.overflow-x-auto\n         [:div.vega-lite {:ref ref-fn}]]\n        default-loading-view))))\n\n(defn render-plotly [value]\n  (let [plotly (use-d3-require \"plotly.js-dist@2.15.1\")\n        ref-fn (react/useCallback #(when %\n                                     (.newPlot plotly % (clj->js value)))\n                                  #js[value plotly])]\n    (when value\n      (if plotly\n        [:div.overflow-x-auto\n         [:div.plotly {:ref ref-fn}]]\n        default-loading-view))))\n\n(def render-mathjax mathjax/viewer)\n(def render-code code/viewer)\n\n(def expand-icon\n  [:svg {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :width 12 :height 12}\n   [:path {:fill-rule \"evenodd\" :d \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(defn render-folded-code [code-string]\n  (r/with-let [!hidden? (r/atom true)]\n    (if @!hidden?\n      [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group\n       [:span.hover:text-slate-500\n        {:class \"text-[10px]\"\n         :on-click #(swap! !hidden? not)}\n        \"show code\"]\n       #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n              {:class \"text-[10px]\"}\n              \"hide result\"]\n       [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n        {:class \"text-[10px]\"}\n        \"cached in memory\"]\n       [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n        {:class \"text-[10px]\"}\n        \"evaluated in 0.2s\"]]\n      [:<>\n       [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group.mb-1\n        [:span.hover:text-slate-500\n         {:class \"text-[10px]\"\n          :on-click #(swap! !hidden? not)}\n         \"hide code\"]\n        #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n               {:class \"text-[10px]\"}\n               \"hide result\"]\n        [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n         {:class \"text-[10px]\"}\n         \"cached in memory\"]\n        [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n         {:class \"text-[10px]\"}\n         \"evaluated in 0.2s\"]]\n       [:div.viewer-code.mb-2.relative {:style {:margin-top 0}}\n        [render-code code-string]]])))\n\n\n(defn url-for [{:as src :keys [blob-id]}]\n  (if (string? src)\n    src\n    (str \"/_blob/\" blob-id (when-let [opts (seq (dissoc src :blob-id))]\n                             (str \"?\" (opts->query opts))))))\n"]}