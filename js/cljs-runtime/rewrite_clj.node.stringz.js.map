{"version":3,"sources":["rewrite_clj/node/stringz.cljc"],"mappings":"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","names":["rewrite-clj.node.stringz/wrap-string","s","rewrite-clj.node.stringz/join-lines","lines","clojure.string.join","this__4502__auto__","k__4503__auto__","this__4504__auto__","k69018","else__4505__auto__","G__69023","cljs.core/Keyword","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__69032","vec__69035","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__69017","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this69019","other69020","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__69049","this__4510__auto__","k__4511__auto__","pred__69050","cljs.core/keyword-identical?","expr__69051","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.stringz/StringNode","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__69022","extmap__4542__auto__","G__69054","cljs.core/record?","rewrite-clj.node.stringz/->StringNode","rewrite-clj.node.stringz/map->StringNode","_node","cljs.core/next","_opts","cljs.core.map","cljs.core.comp","cljs.tools.reader.edn/read-string","cljs.core/+","node","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.stringz/string-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.stringz\n  (:require [clojure.string :as string]\n            [clojure.tools.reader.edn :as edn]\n            [rewrite-clj.node.protocols :as node] ))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defn- wrap-string [s]\n  (str \"\\\"\" s \"\\\"\"))\n\n(defn- join-lines [lines]\n  (string/join \"\\n\" lines))\n\n(defrecord StringNode [lines]\n  node/Node\n  (tag [_node]\n    (if (next lines)\n      :multi-line\n      :token))\n  (node-type [_node] :string)\n  (printable-only? [_node] false)\n  (sexpr* [_node _opts]\n    (join-lines\n      (map\n        (comp edn/read-string wrap-string)\n        lines)))\n  (length [_node]\n    (+ 2 (reduce + (map count lines))))\n  (string [_node]\n    (wrap-string (join-lines lines)))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! StringNode)\n\n;; ## Constructors\n\n(defn string-node\n  \"Create node representing a string value where `lines` can be a sequence of strings or a single string.\n\n  When `lines` is a sequence, the resulting node will `tag` will be `:multi-line`, otherwise `:token`.\n\n  ```Clojure\n  (require '[rewrite-clj.node :as n])\n\n  (-> (n/string-node \\\"hello\\\")\n      n/string)\n  ;; => \\\"\\\\\\\"hello\\\\\\\"\\\"\n\n  (-> (n/string-node [\\\"line1\\\" \\\"\\\" \\\"line3\\\"])\n       n/string)\n  ;; => \\\"\\\\\\\"line1\\\\n\\\\nline3\\\\\\\"\\\"\n  ```\"\n  [lines]\n  (if (string? lines)\n    (->StringNode [lines])\n    (->StringNode lines)))\n"]}