;; # Welcome to [Clerk](https://clerk.vision/)!

^{:nextjournal.clerk/toc true}
(ns {{top/ns}}.{{main/ns}}
    (:require [mentat.clerk-utils.show :refer [show-sci]]
              [nextjournal.clerk :as clerk]))

;; Hello! This project was generated by the [`jsxgraph/clerk`
;; template](https://jsxgraph.mentat.org/#project-template). The template comes with
;; everything you need you everything you need to

;; - Interactively develop Clerk notebooks
;; - Publish them to [GitHub Pages](https://pages.github.com/) or [Clerk's Garden](https://github.clerk.garden/)
;; - Use a [custom ClojureScript build](https://clerk-utils.mentat.org/#custom-clojurescript-builds) in both modes

;; Some good next steps:

;; - Visit this project's README.md for guides on how to proceed.
;; - Read the [`JSXGraph.cljs` documentation notebook](https://jsxgraph.mentat.org)
;; - Read the [Book of Clerk](https://book.clerk.vision/)
;; - Visit the [Awesome-Clerk](https://github.com/mentat-collective/awesome-clerk) list for ideas
;; - Delete anything in this notebook you feel like you don't need.

;; ## Clerk Environment Basics
;;
;; Here's a basic use of Clerk. This is a function:

(defn hello [s]
  (str "Hello, " s "!"))

;; If we call this function, Clerk will render the form and its output:

(hello "Clerk")

;; - The form `(hello "Clerk")` executes in the JVM.
;; - The resulting string "Hello, Clerk!" is serialized over a WebSocket to the
;;   browser, where Clerk's ClojureScript side renders it using a
;;   pre-registered "viewer".
;; - These viewers are written in code evaluated using the [Small Clojure
;;   Interpreter](https://github.com/babashka/sci), or "SCI".

;; Clerk comes with [many viewers](https://book.clerk.vision/#viewers), and
;; gives us the ability to [write _new_
;; viewers](https://book.clerk.vision/#writing-viewers) using a default SCI
;; environment that Clerk makes available to us.

;; The ["JSXGraph Clerk Viewer"](#jsxgraph-clerk-viewer) section gives an
;; example of a custom viewer written using this project's customized SCI
;; environment.

;; ## JSXGraph Quickstart

;; First, we'll use `clerk/eval-cljs` to install some nice aliases into this
;; notebook's namespace:

(clerk/eval-cljs
 '(require '[reagent.core :as reagent])
 '(require '[jsxgraph.core :as jsx]))

;; > Note that you can also use fully-qualified names of any namespace installed
;; > into SCI via the `{{top/ns}}.sci-extensions` namespace.

;; The following snippet implements the example from the ["Archimedean
;; Spiral"](https://jsxgraph.mentat.org/#archimedean-spiral) section of
;; the [`JSXGraph.cljs` docs
;; notebook](https://jsxgraph.mentat.org/#archimedean-spiral).

;; This example allows for interactive exploration of the [Archimedean
;; Spiral](https://en.wikipedia.org/wiki/Archimedean_spiral). This is a curve of
;; the form
;;
;; $$r=a + b \cdot \theta.$$
;;
;; The board below includes interactive sliders for the $a$ and $b$ parameters,
;; and plots a polar curve for every pair of $(r, \theta)$. See the comments in
;; the source code for details on our choices.
;;
;; > The original example lives at [this
;; > page](http://jsxgraph.org/wiki/index.php/Archimedean_spiral).

(show-sci
 ;; The `!state` atom is populated with the initial slider positions. Note that
 ;; we are NOT using a `reagent/atom`, because we don't need Reagent to perform
 ;; any re-renders when the state changes. Instead, state changes are picked up
 ;; by the function we provide to the curve below.
 (let [!state (atom {:a 1 :b 0.25})]
   [jsx/JSXGraph
    {:boundingbox [-10 10 10 -10]
     :showCopyright false
     ;; This option prevents the spiral from bulging out on the left and right
     ;; side on wider windows by adjusting the provided `:boundingBox`.
     :keepAspectRatio true}

    ;; Just for fun we are using the keyword form here to define components.
    [:slider
     {:name "a"
      ;; The `:parents` are of the form
      ;;
      ;; [<left-point> <right-point> [<min> <current> <max>]]
      :parents [[1 8] [5 8] [0 (:a @!state) 4]]

      ;; Each slider updates a value stored in `!state` above.
      :on {:drag #(swap! !state assoc :a (.Value %))}}]
    [:slider
     {:name "b"
      :parents [[1 9] [5 9] [0 (:b @!state) 4]]
      :on {:drag #(swap! !state assoc :b (.Value %))}}]
    [:curve
     {:id "c"
      ;; [<r(phi)>, <origin-coords>, <min-phi>, <max-phi>]
      :parents [(fn [phi]
                  (let [{:keys [a b]} @!state]
                    (+ a (* b phi))))
                [0 0] 0 (* 8 Math/PI)]
      :curveType "polar"
      :strokewidth 4}]
    ;; Note here that the parents of these elements reference the string-based
    ;; IDs of the element they want to target, instead of the actual
    ;; instance (like in the original example)
    [:glider  {:parents ["c"] :name "g"}]
    [:tangent {:parents ["g"] :dash 2 :strokeColor "#a612a9"}]
    [:normal  {:parents ["g"] :dash 2 :strokeColor "#a612a9"}]]))

;; One potential wrinkle to note when using `JSXGraph.cljs` in Clerk is that you
;; have to define any function you'd like to use over on the ClojureScript side.
;; You won't be able to use this function (defined on the JVM) with JSXGraph:

(defn square [x]
  (* x x))

;; But _this_ version will work, since it's wrapped in
;; `mentat.clerk-utils.show/show-sci`, and is therefore evaluated on the browser
;; side:

(show-sci
 (defn square [x]
   (* x x)))

;; ## JSXGraph Clerk Viewer

;; Here's an example of a viewer that lets us instantiate a `JSXGraph.cljs`
;; graph using data from the JVM. This viewer takes a map-shaped argument from
;; the JVM that specifies the endpoints of an arrow with `:start` and `:end`
;; keys:

(def arrow-viewer
  {:transform-fn clerk/mark-presented
   :render-fn
   '(fn [{:keys [start end]}]
      [jsx/JSXGraph {:boundingbox [-3 3 3 -3] :axis true}
       [jsx/Point {:name "A" :size 1 :parents start}]
       [jsx/Point {:id "B" :name "BEE!" :size 1 :parents end}]
       [jsx/Arrow {:size 4
                   :parents ["A" "B"]}]])})

;; We can apply it here, and see a scene with those endpoints:
^{::clerk/viewer arrow-viewer}
{:start [-1 1]
 :end [2 -1]}

;; We can re-use this viewer with different endpoints:

^{::clerk/viewer arrow-viewer}
{:start [-2 -2]
 :end [2 2.2]}
